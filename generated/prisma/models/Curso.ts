
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Curso` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Curso
 * 
 */
export type CursoModel = runtime.Types.Result.DefaultSelection<Prisma.$CursoPayload>

export type AggregateCurso = {
  _count: CursoCountAggregateOutputType | null
  _avg: CursoAvgAggregateOutputType | null
  _sum: CursoSumAggregateOutputType | null
  _min: CursoMinAggregateOutputType | null
  _max: CursoMaxAggregateOutputType | null
}

export type CursoAvgAggregateOutputType = {
  creditos: number | null
  proyeccionSemestreId: number | null
}

export type CursoSumAggregateOutputType = {
  creditos: number | null
  proyeccionSemestreId: number | null
}

export type CursoMinAggregateOutputType = {
  codigo: string | null
  asignatura: string | null
  creditos: number | null
  semestre: string | null
  proyeccionSemestreId: number | null
}

export type CursoMaxAggregateOutputType = {
  codigo: string | null
  asignatura: string | null
  creditos: number | null
  semestre: string | null
  proyeccionSemestreId: number | null
}

export type CursoCountAggregateOutputType = {
  codigo: number
  asignatura: number
  creditos: number
  semestre: number
  proyeccionSemestreId: number
  _all: number
}


export type CursoAvgAggregateInputType = {
  creditos?: true
  proyeccionSemestreId?: true
}

export type CursoSumAggregateInputType = {
  creditos?: true
  proyeccionSemestreId?: true
}

export type CursoMinAggregateInputType = {
  codigo?: true
  asignatura?: true
  creditos?: true
  semestre?: true
  proyeccionSemestreId?: true
}

export type CursoMaxAggregateInputType = {
  codigo?: true
  asignatura?: true
  creditos?: true
  semestre?: true
  proyeccionSemestreId?: true
}

export type CursoCountAggregateInputType = {
  codigo?: true
  asignatura?: true
  creditos?: true
  semestre?: true
  proyeccionSemestreId?: true
  _all?: true
}

export type CursoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Curso to aggregate.
   */
  where?: Prisma.CursoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Cursos to fetch.
   */
  orderBy?: Prisma.CursoOrderByWithRelationInput | Prisma.CursoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CursoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Cursos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Cursos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Cursos
  **/
  _count?: true | CursoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CursoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CursoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CursoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CursoMaxAggregateInputType
}

export type GetCursoAggregateType<T extends CursoAggregateArgs> = {
      [P in keyof T & keyof AggregateCurso]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCurso[P]>
    : Prisma.GetScalarType<T[P], AggregateCurso[P]>
}




export type CursoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CursoWhereInput
  orderBy?: Prisma.CursoOrderByWithAggregationInput | Prisma.CursoOrderByWithAggregationInput[]
  by: Prisma.CursoScalarFieldEnum[] | Prisma.CursoScalarFieldEnum
  having?: Prisma.CursoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CursoCountAggregateInputType | true
  _avg?: CursoAvgAggregateInputType
  _sum?: CursoSumAggregateInputType
  _min?: CursoMinAggregateInputType
  _max?: CursoMaxAggregateInputType
}

export type CursoGroupByOutputType = {
  codigo: string
  asignatura: string
  creditos: number
  semestre: string
  proyeccionSemestreId: number | null
  _count: CursoCountAggregateOutputType | null
  _avg: CursoAvgAggregateOutputType | null
  _sum: CursoSumAggregateOutputType | null
  _min: CursoMinAggregateOutputType | null
  _max: CursoMaxAggregateOutputType | null
}

type GetCursoGroupByPayload<T extends CursoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CursoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CursoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CursoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CursoGroupByOutputType[P]>
      }
    >
  >



export type CursoWhereInput = {
  AND?: Prisma.CursoWhereInput | Prisma.CursoWhereInput[]
  OR?: Prisma.CursoWhereInput[]
  NOT?: Prisma.CursoWhereInput | Prisma.CursoWhereInput[]
  codigo?: Prisma.StringFilter<"Curso"> | string
  asignatura?: Prisma.StringFilter<"Curso"> | string
  creditos?: Prisma.IntFilter<"Curso"> | number
  semestre?: Prisma.StringFilter<"Curso"> | string
  proyeccionSemestreId?: Prisma.IntNullableFilter<"Curso"> | number | null
  ProyeccionSemestre?: Prisma.XOR<Prisma.ProyeccionSemestreNullableScalarRelationFilter, Prisma.ProyeccionSemestreWhereInput> | null
}

export type CursoOrderByWithRelationInput = {
  codigo?: Prisma.SortOrder
  asignatura?: Prisma.SortOrder
  creditos?: Prisma.SortOrder
  semestre?: Prisma.SortOrder
  proyeccionSemestreId?: Prisma.SortOrderInput | Prisma.SortOrder
  ProyeccionSemestre?: Prisma.ProyeccionSemestreOrderByWithRelationInput
}

export type CursoWhereUniqueInput = Prisma.AtLeast<{
  codigo?: string
  AND?: Prisma.CursoWhereInput | Prisma.CursoWhereInput[]
  OR?: Prisma.CursoWhereInput[]
  NOT?: Prisma.CursoWhereInput | Prisma.CursoWhereInput[]
  asignatura?: Prisma.StringFilter<"Curso"> | string
  creditos?: Prisma.IntFilter<"Curso"> | number
  semestre?: Prisma.StringFilter<"Curso"> | string
  proyeccionSemestreId?: Prisma.IntNullableFilter<"Curso"> | number | null
  ProyeccionSemestre?: Prisma.XOR<Prisma.ProyeccionSemestreNullableScalarRelationFilter, Prisma.ProyeccionSemestreWhereInput> | null
}, "codigo">

export type CursoOrderByWithAggregationInput = {
  codigo?: Prisma.SortOrder
  asignatura?: Prisma.SortOrder
  creditos?: Prisma.SortOrder
  semestre?: Prisma.SortOrder
  proyeccionSemestreId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.CursoCountOrderByAggregateInput
  _avg?: Prisma.CursoAvgOrderByAggregateInput
  _max?: Prisma.CursoMaxOrderByAggregateInput
  _min?: Prisma.CursoMinOrderByAggregateInput
  _sum?: Prisma.CursoSumOrderByAggregateInput
}

export type CursoScalarWhereWithAggregatesInput = {
  AND?: Prisma.CursoScalarWhereWithAggregatesInput | Prisma.CursoScalarWhereWithAggregatesInput[]
  OR?: Prisma.CursoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CursoScalarWhereWithAggregatesInput | Prisma.CursoScalarWhereWithAggregatesInput[]
  codigo?: Prisma.StringWithAggregatesFilter<"Curso"> | string
  asignatura?: Prisma.StringWithAggregatesFilter<"Curso"> | string
  creditos?: Prisma.IntWithAggregatesFilter<"Curso"> | number
  semestre?: Prisma.StringWithAggregatesFilter<"Curso"> | string
  proyeccionSemestreId?: Prisma.IntNullableWithAggregatesFilter<"Curso"> | number | null
}

export type CursoCreateInput = {
  codigo: string
  asignatura: string
  creditos: number
  semestre: string
  ProyeccionSemestre?: Prisma.ProyeccionSemestreCreateNestedOneWithoutCursosInput
}

export type CursoUncheckedCreateInput = {
  codigo: string
  asignatura: string
  creditos: number
  semestre: string
  proyeccionSemestreId?: number | null
}

export type CursoUpdateInput = {
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  asignatura?: Prisma.StringFieldUpdateOperationsInput | string
  creditos?: Prisma.IntFieldUpdateOperationsInput | number
  semestre?: Prisma.StringFieldUpdateOperationsInput | string
  ProyeccionSemestre?: Prisma.ProyeccionSemestreUpdateOneWithoutCursosNestedInput
}

export type CursoUncheckedUpdateInput = {
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  asignatura?: Prisma.StringFieldUpdateOperationsInput | string
  creditos?: Prisma.IntFieldUpdateOperationsInput | number
  semestre?: Prisma.StringFieldUpdateOperationsInput | string
  proyeccionSemestreId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type CursoCreateManyInput = {
  codigo: string
  asignatura: string
  creditos: number
  semestre: string
  proyeccionSemestreId?: number | null
}

export type CursoUpdateManyMutationInput = {
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  asignatura?: Prisma.StringFieldUpdateOperationsInput | string
  creditos?: Prisma.IntFieldUpdateOperationsInput | number
  semestre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CursoUncheckedUpdateManyInput = {
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  asignatura?: Prisma.StringFieldUpdateOperationsInput | string
  creditos?: Prisma.IntFieldUpdateOperationsInput | number
  semestre?: Prisma.StringFieldUpdateOperationsInput | string
  proyeccionSemestreId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type CursoCountOrderByAggregateInput = {
  codigo?: Prisma.SortOrder
  asignatura?: Prisma.SortOrder
  creditos?: Prisma.SortOrder
  semestre?: Prisma.SortOrder
  proyeccionSemestreId?: Prisma.SortOrder
}

export type CursoAvgOrderByAggregateInput = {
  creditos?: Prisma.SortOrder
  proyeccionSemestreId?: Prisma.SortOrder
}

export type CursoMaxOrderByAggregateInput = {
  codigo?: Prisma.SortOrder
  asignatura?: Prisma.SortOrder
  creditos?: Prisma.SortOrder
  semestre?: Prisma.SortOrder
  proyeccionSemestreId?: Prisma.SortOrder
}

export type CursoMinOrderByAggregateInput = {
  codigo?: Prisma.SortOrder
  asignatura?: Prisma.SortOrder
  creditos?: Prisma.SortOrder
  semestre?: Prisma.SortOrder
  proyeccionSemestreId?: Prisma.SortOrder
}

export type CursoSumOrderByAggregateInput = {
  creditos?: Prisma.SortOrder
  proyeccionSemestreId?: Prisma.SortOrder
}

export type CursoListRelationFilter = {
  every?: Prisma.CursoWhereInput
  some?: Prisma.CursoWhereInput
  none?: Prisma.CursoWhereInput
}

export type CursoOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type CursoCreateNestedManyWithoutProyeccionSemestreInput = {
  create?: Prisma.XOR<Prisma.CursoCreateWithoutProyeccionSemestreInput, Prisma.CursoUncheckedCreateWithoutProyeccionSemestreInput> | Prisma.CursoCreateWithoutProyeccionSemestreInput[] | Prisma.CursoUncheckedCreateWithoutProyeccionSemestreInput[]
  connectOrCreate?: Prisma.CursoCreateOrConnectWithoutProyeccionSemestreInput | Prisma.CursoCreateOrConnectWithoutProyeccionSemestreInput[]
  createMany?: Prisma.CursoCreateManyProyeccionSemestreInputEnvelope
  connect?: Prisma.CursoWhereUniqueInput | Prisma.CursoWhereUniqueInput[]
}

export type CursoUncheckedCreateNestedManyWithoutProyeccionSemestreInput = {
  create?: Prisma.XOR<Prisma.CursoCreateWithoutProyeccionSemestreInput, Prisma.CursoUncheckedCreateWithoutProyeccionSemestreInput> | Prisma.CursoCreateWithoutProyeccionSemestreInput[] | Prisma.CursoUncheckedCreateWithoutProyeccionSemestreInput[]
  connectOrCreate?: Prisma.CursoCreateOrConnectWithoutProyeccionSemestreInput | Prisma.CursoCreateOrConnectWithoutProyeccionSemestreInput[]
  createMany?: Prisma.CursoCreateManyProyeccionSemestreInputEnvelope
  connect?: Prisma.CursoWhereUniqueInput | Prisma.CursoWhereUniqueInput[]
}

export type CursoUpdateManyWithoutProyeccionSemestreNestedInput = {
  create?: Prisma.XOR<Prisma.CursoCreateWithoutProyeccionSemestreInput, Prisma.CursoUncheckedCreateWithoutProyeccionSemestreInput> | Prisma.CursoCreateWithoutProyeccionSemestreInput[] | Prisma.CursoUncheckedCreateWithoutProyeccionSemestreInput[]
  connectOrCreate?: Prisma.CursoCreateOrConnectWithoutProyeccionSemestreInput | Prisma.CursoCreateOrConnectWithoutProyeccionSemestreInput[]
  upsert?: Prisma.CursoUpsertWithWhereUniqueWithoutProyeccionSemestreInput | Prisma.CursoUpsertWithWhereUniqueWithoutProyeccionSemestreInput[]
  createMany?: Prisma.CursoCreateManyProyeccionSemestreInputEnvelope
  set?: Prisma.CursoWhereUniqueInput | Prisma.CursoWhereUniqueInput[]
  disconnect?: Prisma.CursoWhereUniqueInput | Prisma.CursoWhereUniqueInput[]
  delete?: Prisma.CursoWhereUniqueInput | Prisma.CursoWhereUniqueInput[]
  connect?: Prisma.CursoWhereUniqueInput | Prisma.CursoWhereUniqueInput[]
  update?: Prisma.CursoUpdateWithWhereUniqueWithoutProyeccionSemestreInput | Prisma.CursoUpdateWithWhereUniqueWithoutProyeccionSemestreInput[]
  updateMany?: Prisma.CursoUpdateManyWithWhereWithoutProyeccionSemestreInput | Prisma.CursoUpdateManyWithWhereWithoutProyeccionSemestreInput[]
  deleteMany?: Prisma.CursoScalarWhereInput | Prisma.CursoScalarWhereInput[]
}

export type CursoUncheckedUpdateManyWithoutProyeccionSemestreNestedInput = {
  create?: Prisma.XOR<Prisma.CursoCreateWithoutProyeccionSemestreInput, Prisma.CursoUncheckedCreateWithoutProyeccionSemestreInput> | Prisma.CursoCreateWithoutProyeccionSemestreInput[] | Prisma.CursoUncheckedCreateWithoutProyeccionSemestreInput[]
  connectOrCreate?: Prisma.CursoCreateOrConnectWithoutProyeccionSemestreInput | Prisma.CursoCreateOrConnectWithoutProyeccionSemestreInput[]
  upsert?: Prisma.CursoUpsertWithWhereUniqueWithoutProyeccionSemestreInput | Prisma.CursoUpsertWithWhereUniqueWithoutProyeccionSemestreInput[]
  createMany?: Prisma.CursoCreateManyProyeccionSemestreInputEnvelope
  set?: Prisma.CursoWhereUniqueInput | Prisma.CursoWhereUniqueInput[]
  disconnect?: Prisma.CursoWhereUniqueInput | Prisma.CursoWhereUniqueInput[]
  delete?: Prisma.CursoWhereUniqueInput | Prisma.CursoWhereUniqueInput[]
  connect?: Prisma.CursoWhereUniqueInput | Prisma.CursoWhereUniqueInput[]
  update?: Prisma.CursoUpdateWithWhereUniqueWithoutProyeccionSemestreInput | Prisma.CursoUpdateWithWhereUniqueWithoutProyeccionSemestreInput[]
  updateMany?: Prisma.CursoUpdateManyWithWhereWithoutProyeccionSemestreInput | Prisma.CursoUpdateManyWithWhereWithoutProyeccionSemestreInput[]
  deleteMany?: Prisma.CursoScalarWhereInput | Prisma.CursoScalarWhereInput[]
}

export type CursoCreateWithoutProyeccionSemestreInput = {
  codigo: string
  asignatura: string
  creditos: number
  semestre: string
}

export type CursoUncheckedCreateWithoutProyeccionSemestreInput = {
  codigo: string
  asignatura: string
  creditos: number
  semestre: string
}

export type CursoCreateOrConnectWithoutProyeccionSemestreInput = {
  where: Prisma.CursoWhereUniqueInput
  create: Prisma.XOR<Prisma.CursoCreateWithoutProyeccionSemestreInput, Prisma.CursoUncheckedCreateWithoutProyeccionSemestreInput>
}

export type CursoCreateManyProyeccionSemestreInputEnvelope = {
  data: Prisma.CursoCreateManyProyeccionSemestreInput | Prisma.CursoCreateManyProyeccionSemestreInput[]
  skipDuplicates?: boolean
}

export type CursoUpsertWithWhereUniqueWithoutProyeccionSemestreInput = {
  where: Prisma.CursoWhereUniqueInput
  update: Prisma.XOR<Prisma.CursoUpdateWithoutProyeccionSemestreInput, Prisma.CursoUncheckedUpdateWithoutProyeccionSemestreInput>
  create: Prisma.XOR<Prisma.CursoCreateWithoutProyeccionSemestreInput, Prisma.CursoUncheckedCreateWithoutProyeccionSemestreInput>
}

export type CursoUpdateWithWhereUniqueWithoutProyeccionSemestreInput = {
  where: Prisma.CursoWhereUniqueInput
  data: Prisma.XOR<Prisma.CursoUpdateWithoutProyeccionSemestreInput, Prisma.CursoUncheckedUpdateWithoutProyeccionSemestreInput>
}

export type CursoUpdateManyWithWhereWithoutProyeccionSemestreInput = {
  where: Prisma.CursoScalarWhereInput
  data: Prisma.XOR<Prisma.CursoUpdateManyMutationInput, Prisma.CursoUncheckedUpdateManyWithoutProyeccionSemestreInput>
}

export type CursoScalarWhereInput = {
  AND?: Prisma.CursoScalarWhereInput | Prisma.CursoScalarWhereInput[]
  OR?: Prisma.CursoScalarWhereInput[]
  NOT?: Prisma.CursoScalarWhereInput | Prisma.CursoScalarWhereInput[]
  codigo?: Prisma.StringFilter<"Curso"> | string
  asignatura?: Prisma.StringFilter<"Curso"> | string
  creditos?: Prisma.IntFilter<"Curso"> | number
  semestre?: Prisma.StringFilter<"Curso"> | string
  proyeccionSemestreId?: Prisma.IntNullableFilter<"Curso"> | number | null
}

export type CursoCreateManyProyeccionSemestreInput = {
  codigo: string
  asignatura: string
  creditos: number
  semestre: string
}

export type CursoUpdateWithoutProyeccionSemestreInput = {
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  asignatura?: Prisma.StringFieldUpdateOperationsInput | string
  creditos?: Prisma.IntFieldUpdateOperationsInput | number
  semestre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CursoUncheckedUpdateWithoutProyeccionSemestreInput = {
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  asignatura?: Prisma.StringFieldUpdateOperationsInput | string
  creditos?: Prisma.IntFieldUpdateOperationsInput | number
  semestre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CursoUncheckedUpdateManyWithoutProyeccionSemestreInput = {
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  asignatura?: Prisma.StringFieldUpdateOperationsInput | string
  creditos?: Prisma.IntFieldUpdateOperationsInput | number
  semestre?: Prisma.StringFieldUpdateOperationsInput | string
}



export type CursoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  codigo?: boolean
  asignatura?: boolean
  creditos?: boolean
  semestre?: boolean
  proyeccionSemestreId?: boolean
  ProyeccionSemestre?: boolean | Prisma.Curso$ProyeccionSemestreArgs<ExtArgs>
}, ExtArgs["result"]["curso"]>

export type CursoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  codigo?: boolean
  asignatura?: boolean
  creditos?: boolean
  semestre?: boolean
  proyeccionSemestreId?: boolean
  ProyeccionSemestre?: boolean | Prisma.Curso$ProyeccionSemestreArgs<ExtArgs>
}, ExtArgs["result"]["curso"]>

export type CursoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  codigo?: boolean
  asignatura?: boolean
  creditos?: boolean
  semestre?: boolean
  proyeccionSemestreId?: boolean
  ProyeccionSemestre?: boolean | Prisma.Curso$ProyeccionSemestreArgs<ExtArgs>
}, ExtArgs["result"]["curso"]>

export type CursoSelectScalar = {
  codigo?: boolean
  asignatura?: boolean
  creditos?: boolean
  semestre?: boolean
  proyeccionSemestreId?: boolean
}

export type CursoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"codigo" | "asignatura" | "creditos" | "semestre" | "proyeccionSemestreId", ExtArgs["result"]["curso"]>
export type CursoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ProyeccionSemestre?: boolean | Prisma.Curso$ProyeccionSemestreArgs<ExtArgs>
}
export type CursoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ProyeccionSemestre?: boolean | Prisma.Curso$ProyeccionSemestreArgs<ExtArgs>
}
export type CursoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ProyeccionSemestre?: boolean | Prisma.Curso$ProyeccionSemestreArgs<ExtArgs>
}

export type $CursoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Curso"
  objects: {
    ProyeccionSemestre: Prisma.$ProyeccionSemestrePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    codigo: string
    asignatura: string
    creditos: number
    semestre: string
    proyeccionSemestreId: number | null
  }, ExtArgs["result"]["curso"]>
  composites: {}
}

export type CursoGetPayload<S extends boolean | null | undefined | CursoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CursoPayload, S>

export type CursoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CursoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CursoCountAggregateInputType | true
  }

export interface CursoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Curso'], meta: { name: 'Curso' } }
  /**
   * Find zero or one Curso that matches the filter.
   * @param {CursoFindUniqueArgs} args - Arguments to find a Curso
   * @example
   * // Get one Curso
   * const curso = await prisma.curso.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CursoFindUniqueArgs>(args: Prisma.SelectSubset<T, CursoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CursoClient<runtime.Types.Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Curso that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CursoFindUniqueOrThrowArgs} args - Arguments to find a Curso
   * @example
   * // Get one Curso
   * const curso = await prisma.curso.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CursoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CursoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CursoClient<runtime.Types.Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Curso that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CursoFindFirstArgs} args - Arguments to find a Curso
   * @example
   * // Get one Curso
   * const curso = await prisma.curso.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CursoFindFirstArgs>(args?: Prisma.SelectSubset<T, CursoFindFirstArgs<ExtArgs>>): Prisma.Prisma__CursoClient<runtime.Types.Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Curso that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CursoFindFirstOrThrowArgs} args - Arguments to find a Curso
   * @example
   * // Get one Curso
   * const curso = await prisma.curso.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CursoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CursoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CursoClient<runtime.Types.Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Cursos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CursoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Cursos
   * const cursos = await prisma.curso.findMany()
   * 
   * // Get first 10 Cursos
   * const cursos = await prisma.curso.findMany({ take: 10 })
   * 
   * // Only select the `codigo`
   * const cursoWithCodigoOnly = await prisma.curso.findMany({ select: { codigo: true } })
   * 
   */
  findMany<T extends CursoFindManyArgs>(args?: Prisma.SelectSubset<T, CursoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Curso.
   * @param {CursoCreateArgs} args - Arguments to create a Curso.
   * @example
   * // Create one Curso
   * const Curso = await prisma.curso.create({
   *   data: {
   *     // ... data to create a Curso
   *   }
   * })
   * 
   */
  create<T extends CursoCreateArgs>(args: Prisma.SelectSubset<T, CursoCreateArgs<ExtArgs>>): Prisma.Prisma__CursoClient<runtime.Types.Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Cursos.
   * @param {CursoCreateManyArgs} args - Arguments to create many Cursos.
   * @example
   * // Create many Cursos
   * const curso = await prisma.curso.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CursoCreateManyArgs>(args?: Prisma.SelectSubset<T, CursoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Cursos and returns the data saved in the database.
   * @param {CursoCreateManyAndReturnArgs} args - Arguments to create many Cursos.
   * @example
   * // Create many Cursos
   * const curso = await prisma.curso.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Cursos and only return the `codigo`
   * const cursoWithCodigoOnly = await prisma.curso.createManyAndReturn({
   *   select: { codigo: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CursoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CursoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Curso.
   * @param {CursoDeleteArgs} args - Arguments to delete one Curso.
   * @example
   * // Delete one Curso
   * const Curso = await prisma.curso.delete({
   *   where: {
   *     // ... filter to delete one Curso
   *   }
   * })
   * 
   */
  delete<T extends CursoDeleteArgs>(args: Prisma.SelectSubset<T, CursoDeleteArgs<ExtArgs>>): Prisma.Prisma__CursoClient<runtime.Types.Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Curso.
   * @param {CursoUpdateArgs} args - Arguments to update one Curso.
   * @example
   * // Update one Curso
   * const curso = await prisma.curso.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CursoUpdateArgs>(args: Prisma.SelectSubset<T, CursoUpdateArgs<ExtArgs>>): Prisma.Prisma__CursoClient<runtime.Types.Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Cursos.
   * @param {CursoDeleteManyArgs} args - Arguments to filter Cursos to delete.
   * @example
   * // Delete a few Cursos
   * const { count } = await prisma.curso.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CursoDeleteManyArgs>(args?: Prisma.SelectSubset<T, CursoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Cursos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CursoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Cursos
   * const curso = await prisma.curso.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CursoUpdateManyArgs>(args: Prisma.SelectSubset<T, CursoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Cursos and returns the data updated in the database.
   * @param {CursoUpdateManyAndReturnArgs} args - Arguments to update many Cursos.
   * @example
   * // Update many Cursos
   * const curso = await prisma.curso.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Cursos and only return the `codigo`
   * const cursoWithCodigoOnly = await prisma.curso.updateManyAndReturn({
   *   select: { codigo: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CursoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CursoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Curso.
   * @param {CursoUpsertArgs} args - Arguments to update or create a Curso.
   * @example
   * // Update or create a Curso
   * const curso = await prisma.curso.upsert({
   *   create: {
   *     // ... data to create a Curso
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Curso we want to update
   *   }
   * })
   */
  upsert<T extends CursoUpsertArgs>(args: Prisma.SelectSubset<T, CursoUpsertArgs<ExtArgs>>): Prisma.Prisma__CursoClient<runtime.Types.Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Cursos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CursoCountArgs} args - Arguments to filter Cursos to count.
   * @example
   * // Count the number of Cursos
   * const count = await prisma.curso.count({
   *   where: {
   *     // ... the filter for the Cursos we want to count
   *   }
   * })
  **/
  count<T extends CursoCountArgs>(
    args?: Prisma.Subset<T, CursoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CursoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Curso.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CursoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CursoAggregateArgs>(args: Prisma.Subset<T, CursoAggregateArgs>): Prisma.PrismaPromise<GetCursoAggregateType<T>>

  /**
   * Group by Curso.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CursoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CursoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CursoGroupByArgs['orderBy'] }
      : { orderBy?: CursoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CursoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCursoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Curso model
 */
readonly fields: CursoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Curso.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CursoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  ProyeccionSemestre<T extends Prisma.Curso$ProyeccionSemestreArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Curso$ProyeccionSemestreArgs<ExtArgs>>): Prisma.Prisma__ProyeccionSemestreClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionSemestrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Curso model
 */
export interface CursoFieldRefs {
  readonly codigo: Prisma.FieldRef<"Curso", 'String'>
  readonly asignatura: Prisma.FieldRef<"Curso", 'String'>
  readonly creditos: Prisma.FieldRef<"Curso", 'Int'>
  readonly semestre: Prisma.FieldRef<"Curso", 'String'>
  readonly proyeccionSemestreId: Prisma.FieldRef<"Curso", 'Int'>
}
    

// Custom InputTypes
/**
 * Curso findUnique
 */
export type CursoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Curso
   */
  select?: Prisma.CursoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Curso
   */
  omit?: Prisma.CursoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CursoInclude<ExtArgs> | null
  /**
   * Filter, which Curso to fetch.
   */
  where: Prisma.CursoWhereUniqueInput
}

/**
 * Curso findUniqueOrThrow
 */
export type CursoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Curso
   */
  select?: Prisma.CursoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Curso
   */
  omit?: Prisma.CursoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CursoInclude<ExtArgs> | null
  /**
   * Filter, which Curso to fetch.
   */
  where: Prisma.CursoWhereUniqueInput
}

/**
 * Curso findFirst
 */
export type CursoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Curso
   */
  select?: Prisma.CursoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Curso
   */
  omit?: Prisma.CursoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CursoInclude<ExtArgs> | null
  /**
   * Filter, which Curso to fetch.
   */
  where?: Prisma.CursoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Cursos to fetch.
   */
  orderBy?: Prisma.CursoOrderByWithRelationInput | Prisma.CursoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Cursos.
   */
  cursor?: Prisma.CursoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Cursos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Cursos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Cursos.
   */
  distinct?: Prisma.CursoScalarFieldEnum | Prisma.CursoScalarFieldEnum[]
}

/**
 * Curso findFirstOrThrow
 */
export type CursoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Curso
   */
  select?: Prisma.CursoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Curso
   */
  omit?: Prisma.CursoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CursoInclude<ExtArgs> | null
  /**
   * Filter, which Curso to fetch.
   */
  where?: Prisma.CursoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Cursos to fetch.
   */
  orderBy?: Prisma.CursoOrderByWithRelationInput | Prisma.CursoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Cursos.
   */
  cursor?: Prisma.CursoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Cursos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Cursos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Cursos.
   */
  distinct?: Prisma.CursoScalarFieldEnum | Prisma.CursoScalarFieldEnum[]
}

/**
 * Curso findMany
 */
export type CursoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Curso
   */
  select?: Prisma.CursoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Curso
   */
  omit?: Prisma.CursoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CursoInclude<ExtArgs> | null
  /**
   * Filter, which Cursos to fetch.
   */
  where?: Prisma.CursoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Cursos to fetch.
   */
  orderBy?: Prisma.CursoOrderByWithRelationInput | Prisma.CursoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Cursos.
   */
  cursor?: Prisma.CursoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Cursos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Cursos.
   */
  skip?: number
  distinct?: Prisma.CursoScalarFieldEnum | Prisma.CursoScalarFieldEnum[]
}

/**
 * Curso create
 */
export type CursoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Curso
   */
  select?: Prisma.CursoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Curso
   */
  omit?: Prisma.CursoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CursoInclude<ExtArgs> | null
  /**
   * The data needed to create a Curso.
   */
  data: Prisma.XOR<Prisma.CursoCreateInput, Prisma.CursoUncheckedCreateInput>
}

/**
 * Curso createMany
 */
export type CursoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Cursos.
   */
  data: Prisma.CursoCreateManyInput | Prisma.CursoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Curso createManyAndReturn
 */
export type CursoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Curso
   */
  select?: Prisma.CursoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Curso
   */
  omit?: Prisma.CursoOmit<ExtArgs> | null
  /**
   * The data used to create many Cursos.
   */
  data: Prisma.CursoCreateManyInput | Prisma.CursoCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CursoIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Curso update
 */
export type CursoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Curso
   */
  select?: Prisma.CursoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Curso
   */
  omit?: Prisma.CursoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CursoInclude<ExtArgs> | null
  /**
   * The data needed to update a Curso.
   */
  data: Prisma.XOR<Prisma.CursoUpdateInput, Prisma.CursoUncheckedUpdateInput>
  /**
   * Choose, which Curso to update.
   */
  where: Prisma.CursoWhereUniqueInput
}

/**
 * Curso updateMany
 */
export type CursoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Cursos.
   */
  data: Prisma.XOR<Prisma.CursoUpdateManyMutationInput, Prisma.CursoUncheckedUpdateManyInput>
  /**
   * Filter which Cursos to update
   */
  where?: Prisma.CursoWhereInput
  /**
   * Limit how many Cursos to update.
   */
  limit?: number
}

/**
 * Curso updateManyAndReturn
 */
export type CursoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Curso
   */
  select?: Prisma.CursoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Curso
   */
  omit?: Prisma.CursoOmit<ExtArgs> | null
  /**
   * The data used to update Cursos.
   */
  data: Prisma.XOR<Prisma.CursoUpdateManyMutationInput, Prisma.CursoUncheckedUpdateManyInput>
  /**
   * Filter which Cursos to update
   */
  where?: Prisma.CursoWhereInput
  /**
   * Limit how many Cursos to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CursoIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Curso upsert
 */
export type CursoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Curso
   */
  select?: Prisma.CursoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Curso
   */
  omit?: Prisma.CursoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CursoInclude<ExtArgs> | null
  /**
   * The filter to search for the Curso to update in case it exists.
   */
  where: Prisma.CursoWhereUniqueInput
  /**
   * In case the Curso found by the `where` argument doesn't exist, create a new Curso with this data.
   */
  create: Prisma.XOR<Prisma.CursoCreateInput, Prisma.CursoUncheckedCreateInput>
  /**
   * In case the Curso was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CursoUpdateInput, Prisma.CursoUncheckedUpdateInput>
}

/**
 * Curso delete
 */
export type CursoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Curso
   */
  select?: Prisma.CursoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Curso
   */
  omit?: Prisma.CursoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CursoInclude<ExtArgs> | null
  /**
   * Filter which Curso to delete.
   */
  where: Prisma.CursoWhereUniqueInput
}

/**
 * Curso deleteMany
 */
export type CursoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Cursos to delete
   */
  where?: Prisma.CursoWhereInput
  /**
   * Limit how many Cursos to delete.
   */
  limit?: number
}

/**
 * Curso.ProyeccionSemestre
 */
export type Curso$ProyeccionSemestreArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProyeccionSemestre
   */
  select?: Prisma.ProyeccionSemestreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProyeccionSemestre
   */
  omit?: Prisma.ProyeccionSemestreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionSemestreInclude<ExtArgs> | null
  where?: Prisma.ProyeccionSemestreWhereInput
}

/**
 * Curso without action
 */
export type CursoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Curso
   */
  select?: Prisma.CursoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Curso
   */
  omit?: Prisma.CursoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CursoInclude<ExtArgs> | null
}
