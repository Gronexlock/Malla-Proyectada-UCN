
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Carrera` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Carrera
 * 
 */
export type CarreraModel = runtime.Types.Result.DefaultSelection<Prisma.$CarreraPayload>

export type AggregateCarrera = {
  _count: CarreraCountAggregateOutputType | null
  _min: CarreraMinAggregateOutputType | null
  _max: CarreraMaxAggregateOutputType | null
}

export type CarreraMinAggregateOutputType = {
  codigo: string | null
  nombre: string | null
  catalogo: string | null
  estudianteRut: string | null
}

export type CarreraMaxAggregateOutputType = {
  codigo: string | null
  nombre: string | null
  catalogo: string | null
  estudianteRut: string | null
}

export type CarreraCountAggregateOutputType = {
  codigo: number
  nombre: number
  catalogo: number
  estudianteRut: number
  _all: number
}


export type CarreraMinAggregateInputType = {
  codigo?: true
  nombre?: true
  catalogo?: true
  estudianteRut?: true
}

export type CarreraMaxAggregateInputType = {
  codigo?: true
  nombre?: true
  catalogo?: true
  estudianteRut?: true
}

export type CarreraCountAggregateInputType = {
  codigo?: true
  nombre?: true
  catalogo?: true
  estudianteRut?: true
  _all?: true
}

export type CarreraAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Carrera to aggregate.
   */
  where?: Prisma.CarreraWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Carreras to fetch.
   */
  orderBy?: Prisma.CarreraOrderByWithRelationInput | Prisma.CarreraOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CarreraWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Carreras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Carreras.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Carreras
  **/
  _count?: true | CarreraCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CarreraMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CarreraMaxAggregateInputType
}

export type GetCarreraAggregateType<T extends CarreraAggregateArgs> = {
      [P in keyof T & keyof AggregateCarrera]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCarrera[P]>
    : Prisma.GetScalarType<T[P], AggregateCarrera[P]>
}




export type CarreraGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CarreraWhereInput
  orderBy?: Prisma.CarreraOrderByWithAggregationInput | Prisma.CarreraOrderByWithAggregationInput[]
  by: Prisma.CarreraScalarFieldEnum[] | Prisma.CarreraScalarFieldEnum
  having?: Prisma.CarreraScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CarreraCountAggregateInputType | true
  _min?: CarreraMinAggregateInputType
  _max?: CarreraMaxAggregateInputType
}

export type CarreraGroupByOutputType = {
  codigo: string
  nombre: string
  catalogo: string
  estudianteRut: string | null
  _count: CarreraCountAggregateOutputType | null
  _min: CarreraMinAggregateOutputType | null
  _max: CarreraMaxAggregateOutputType | null
}

type GetCarreraGroupByPayload<T extends CarreraGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CarreraGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CarreraGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CarreraGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CarreraGroupByOutputType[P]>
      }
    >
  >



export type CarreraWhereInput = {
  AND?: Prisma.CarreraWhereInput | Prisma.CarreraWhereInput[]
  OR?: Prisma.CarreraWhereInput[]
  NOT?: Prisma.CarreraWhereInput | Prisma.CarreraWhereInput[]
  codigo?: Prisma.StringFilter<"Carrera"> | string
  nombre?: Prisma.StringFilter<"Carrera"> | string
  catalogo?: Prisma.StringFilter<"Carrera"> | string
  estudianteRut?: Prisma.StringNullableFilter<"Carrera"> | string | null
  Estudiante?: Prisma.XOR<Prisma.EstudianteNullableScalarRelationFilter, Prisma.EstudianteWhereInput> | null
  Proyeccion?: Prisma.ProyeccionListRelationFilter
}

export type CarreraOrderByWithRelationInput = {
  codigo?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  catalogo?: Prisma.SortOrder
  estudianteRut?: Prisma.SortOrderInput | Prisma.SortOrder
  Estudiante?: Prisma.EstudianteOrderByWithRelationInput
  Proyeccion?: Prisma.ProyeccionOrderByRelationAggregateInput
}

export type CarreraWhereUniqueInput = Prisma.AtLeast<{
  codigo?: string
  AND?: Prisma.CarreraWhereInput | Prisma.CarreraWhereInput[]
  OR?: Prisma.CarreraWhereInput[]
  NOT?: Prisma.CarreraWhereInput | Prisma.CarreraWhereInput[]
  nombre?: Prisma.StringFilter<"Carrera"> | string
  catalogo?: Prisma.StringFilter<"Carrera"> | string
  estudianteRut?: Prisma.StringNullableFilter<"Carrera"> | string | null
  Estudiante?: Prisma.XOR<Prisma.EstudianteNullableScalarRelationFilter, Prisma.EstudianteWhereInput> | null
  Proyeccion?: Prisma.ProyeccionListRelationFilter
}, "codigo">

export type CarreraOrderByWithAggregationInput = {
  codigo?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  catalogo?: Prisma.SortOrder
  estudianteRut?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.CarreraCountOrderByAggregateInput
  _max?: Prisma.CarreraMaxOrderByAggregateInput
  _min?: Prisma.CarreraMinOrderByAggregateInput
}

export type CarreraScalarWhereWithAggregatesInput = {
  AND?: Prisma.CarreraScalarWhereWithAggregatesInput | Prisma.CarreraScalarWhereWithAggregatesInput[]
  OR?: Prisma.CarreraScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CarreraScalarWhereWithAggregatesInput | Prisma.CarreraScalarWhereWithAggregatesInput[]
  codigo?: Prisma.StringWithAggregatesFilter<"Carrera"> | string
  nombre?: Prisma.StringWithAggregatesFilter<"Carrera"> | string
  catalogo?: Prisma.StringWithAggregatesFilter<"Carrera"> | string
  estudianteRut?: Prisma.StringNullableWithAggregatesFilter<"Carrera"> | string | null
}

export type CarreraCreateInput = {
  codigo: string
  nombre: string
  catalogo: string
  Estudiante?: Prisma.EstudianteCreateNestedOneWithoutCarrerasInput
  Proyeccion?: Prisma.ProyeccionCreateNestedManyWithoutCarreraInput
}

export type CarreraUncheckedCreateInput = {
  codigo: string
  nombre: string
  catalogo: string
  estudianteRut?: string | null
  Proyeccion?: Prisma.ProyeccionUncheckedCreateNestedManyWithoutCarreraInput
}

export type CarreraUpdateInput = {
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  catalogo?: Prisma.StringFieldUpdateOperationsInput | string
  Estudiante?: Prisma.EstudianteUpdateOneWithoutCarrerasNestedInput
  Proyeccion?: Prisma.ProyeccionUpdateManyWithoutCarreraNestedInput
}

export type CarreraUncheckedUpdateInput = {
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  catalogo?: Prisma.StringFieldUpdateOperationsInput | string
  estudianteRut?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Proyeccion?: Prisma.ProyeccionUncheckedUpdateManyWithoutCarreraNestedInput
}

export type CarreraCreateManyInput = {
  codigo: string
  nombre: string
  catalogo: string
  estudianteRut?: string | null
}

export type CarreraUpdateManyMutationInput = {
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  catalogo?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CarreraUncheckedUpdateManyInput = {
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  catalogo?: Prisma.StringFieldUpdateOperationsInput | string
  estudianteRut?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type CarreraScalarRelationFilter = {
  is?: Prisma.CarreraWhereInput
  isNot?: Prisma.CarreraWhereInput
}

export type CarreraCountOrderByAggregateInput = {
  codigo?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  catalogo?: Prisma.SortOrder
  estudianteRut?: Prisma.SortOrder
}

export type CarreraMaxOrderByAggregateInput = {
  codigo?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  catalogo?: Prisma.SortOrder
  estudianteRut?: Prisma.SortOrder
}

export type CarreraMinOrderByAggregateInput = {
  codigo?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  catalogo?: Prisma.SortOrder
  estudianteRut?: Prisma.SortOrder
}

export type CarreraListRelationFilter = {
  every?: Prisma.CarreraWhereInput
  some?: Prisma.CarreraWhereInput
  none?: Prisma.CarreraWhereInput
}

export type CarreraOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CarreraCreateNestedOneWithoutProyeccionInput = {
  create?: Prisma.XOR<Prisma.CarreraCreateWithoutProyeccionInput, Prisma.CarreraUncheckedCreateWithoutProyeccionInput>
  connectOrCreate?: Prisma.CarreraCreateOrConnectWithoutProyeccionInput
  connect?: Prisma.CarreraWhereUniqueInput
}

export type CarreraUpdateOneRequiredWithoutProyeccionNestedInput = {
  create?: Prisma.XOR<Prisma.CarreraCreateWithoutProyeccionInput, Prisma.CarreraUncheckedCreateWithoutProyeccionInput>
  connectOrCreate?: Prisma.CarreraCreateOrConnectWithoutProyeccionInput
  upsert?: Prisma.CarreraUpsertWithoutProyeccionInput
  connect?: Prisma.CarreraWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CarreraUpdateToOneWithWhereWithoutProyeccionInput, Prisma.CarreraUpdateWithoutProyeccionInput>, Prisma.CarreraUncheckedUpdateWithoutProyeccionInput>
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type CarreraCreateNestedManyWithoutEstudianteInput = {
  create?: Prisma.XOR<Prisma.CarreraCreateWithoutEstudianteInput, Prisma.CarreraUncheckedCreateWithoutEstudianteInput> | Prisma.CarreraCreateWithoutEstudianteInput[] | Prisma.CarreraUncheckedCreateWithoutEstudianteInput[]
  connectOrCreate?: Prisma.CarreraCreateOrConnectWithoutEstudianteInput | Prisma.CarreraCreateOrConnectWithoutEstudianteInput[]
  createMany?: Prisma.CarreraCreateManyEstudianteInputEnvelope
  connect?: Prisma.CarreraWhereUniqueInput | Prisma.CarreraWhereUniqueInput[]
}

export type CarreraUncheckedCreateNestedManyWithoutEstudianteInput = {
  create?: Prisma.XOR<Prisma.CarreraCreateWithoutEstudianteInput, Prisma.CarreraUncheckedCreateWithoutEstudianteInput> | Prisma.CarreraCreateWithoutEstudianteInput[] | Prisma.CarreraUncheckedCreateWithoutEstudianteInput[]
  connectOrCreate?: Prisma.CarreraCreateOrConnectWithoutEstudianteInput | Prisma.CarreraCreateOrConnectWithoutEstudianteInput[]
  createMany?: Prisma.CarreraCreateManyEstudianteInputEnvelope
  connect?: Prisma.CarreraWhereUniqueInput | Prisma.CarreraWhereUniqueInput[]
}

export type CarreraUpdateManyWithoutEstudianteNestedInput = {
  create?: Prisma.XOR<Prisma.CarreraCreateWithoutEstudianteInput, Prisma.CarreraUncheckedCreateWithoutEstudianteInput> | Prisma.CarreraCreateWithoutEstudianteInput[] | Prisma.CarreraUncheckedCreateWithoutEstudianteInput[]
  connectOrCreate?: Prisma.CarreraCreateOrConnectWithoutEstudianteInput | Prisma.CarreraCreateOrConnectWithoutEstudianteInput[]
  upsert?: Prisma.CarreraUpsertWithWhereUniqueWithoutEstudianteInput | Prisma.CarreraUpsertWithWhereUniqueWithoutEstudianteInput[]
  createMany?: Prisma.CarreraCreateManyEstudianteInputEnvelope
  set?: Prisma.CarreraWhereUniqueInput | Prisma.CarreraWhereUniqueInput[]
  disconnect?: Prisma.CarreraWhereUniqueInput | Prisma.CarreraWhereUniqueInput[]
  delete?: Prisma.CarreraWhereUniqueInput | Prisma.CarreraWhereUniqueInput[]
  connect?: Prisma.CarreraWhereUniqueInput | Prisma.CarreraWhereUniqueInput[]
  update?: Prisma.CarreraUpdateWithWhereUniqueWithoutEstudianteInput | Prisma.CarreraUpdateWithWhereUniqueWithoutEstudianteInput[]
  updateMany?: Prisma.CarreraUpdateManyWithWhereWithoutEstudianteInput | Prisma.CarreraUpdateManyWithWhereWithoutEstudianteInput[]
  deleteMany?: Prisma.CarreraScalarWhereInput | Prisma.CarreraScalarWhereInput[]
}

export type CarreraUncheckedUpdateManyWithoutEstudianteNestedInput = {
  create?: Prisma.XOR<Prisma.CarreraCreateWithoutEstudianteInput, Prisma.CarreraUncheckedCreateWithoutEstudianteInput> | Prisma.CarreraCreateWithoutEstudianteInput[] | Prisma.CarreraUncheckedCreateWithoutEstudianteInput[]
  connectOrCreate?: Prisma.CarreraCreateOrConnectWithoutEstudianteInput | Prisma.CarreraCreateOrConnectWithoutEstudianteInput[]
  upsert?: Prisma.CarreraUpsertWithWhereUniqueWithoutEstudianteInput | Prisma.CarreraUpsertWithWhereUniqueWithoutEstudianteInput[]
  createMany?: Prisma.CarreraCreateManyEstudianteInputEnvelope
  set?: Prisma.CarreraWhereUniqueInput | Prisma.CarreraWhereUniqueInput[]
  disconnect?: Prisma.CarreraWhereUniqueInput | Prisma.CarreraWhereUniqueInput[]
  delete?: Prisma.CarreraWhereUniqueInput | Prisma.CarreraWhereUniqueInput[]
  connect?: Prisma.CarreraWhereUniqueInput | Prisma.CarreraWhereUniqueInput[]
  update?: Prisma.CarreraUpdateWithWhereUniqueWithoutEstudianteInput | Prisma.CarreraUpdateWithWhereUniqueWithoutEstudianteInput[]
  updateMany?: Prisma.CarreraUpdateManyWithWhereWithoutEstudianteInput | Prisma.CarreraUpdateManyWithWhereWithoutEstudianteInput[]
  deleteMany?: Prisma.CarreraScalarWhereInput | Prisma.CarreraScalarWhereInput[]
}

export type CarreraCreateWithoutProyeccionInput = {
  codigo: string
  nombre: string
  catalogo: string
  Estudiante?: Prisma.EstudianteCreateNestedOneWithoutCarrerasInput
}

export type CarreraUncheckedCreateWithoutProyeccionInput = {
  codigo: string
  nombre: string
  catalogo: string
  estudianteRut?: string | null
}

export type CarreraCreateOrConnectWithoutProyeccionInput = {
  where: Prisma.CarreraWhereUniqueInput
  create: Prisma.XOR<Prisma.CarreraCreateWithoutProyeccionInput, Prisma.CarreraUncheckedCreateWithoutProyeccionInput>
}

export type CarreraUpsertWithoutProyeccionInput = {
  update: Prisma.XOR<Prisma.CarreraUpdateWithoutProyeccionInput, Prisma.CarreraUncheckedUpdateWithoutProyeccionInput>
  create: Prisma.XOR<Prisma.CarreraCreateWithoutProyeccionInput, Prisma.CarreraUncheckedCreateWithoutProyeccionInput>
  where?: Prisma.CarreraWhereInput
}

export type CarreraUpdateToOneWithWhereWithoutProyeccionInput = {
  where?: Prisma.CarreraWhereInput
  data: Prisma.XOR<Prisma.CarreraUpdateWithoutProyeccionInput, Prisma.CarreraUncheckedUpdateWithoutProyeccionInput>
}

export type CarreraUpdateWithoutProyeccionInput = {
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  catalogo?: Prisma.StringFieldUpdateOperationsInput | string
  Estudiante?: Prisma.EstudianteUpdateOneWithoutCarrerasNestedInput
}

export type CarreraUncheckedUpdateWithoutProyeccionInput = {
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  catalogo?: Prisma.StringFieldUpdateOperationsInput | string
  estudianteRut?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type CarreraCreateWithoutEstudianteInput = {
  codigo: string
  nombre: string
  catalogo: string
  Proyeccion?: Prisma.ProyeccionCreateNestedManyWithoutCarreraInput
}

export type CarreraUncheckedCreateWithoutEstudianteInput = {
  codigo: string
  nombre: string
  catalogo: string
  Proyeccion?: Prisma.ProyeccionUncheckedCreateNestedManyWithoutCarreraInput
}

export type CarreraCreateOrConnectWithoutEstudianteInput = {
  where: Prisma.CarreraWhereUniqueInput
  create: Prisma.XOR<Prisma.CarreraCreateWithoutEstudianteInput, Prisma.CarreraUncheckedCreateWithoutEstudianteInput>
}

export type CarreraCreateManyEstudianteInputEnvelope = {
  data: Prisma.CarreraCreateManyEstudianteInput | Prisma.CarreraCreateManyEstudianteInput[]
  skipDuplicates?: boolean
}

export type CarreraUpsertWithWhereUniqueWithoutEstudianteInput = {
  where: Prisma.CarreraWhereUniqueInput
  update: Prisma.XOR<Prisma.CarreraUpdateWithoutEstudianteInput, Prisma.CarreraUncheckedUpdateWithoutEstudianteInput>
  create: Prisma.XOR<Prisma.CarreraCreateWithoutEstudianteInput, Prisma.CarreraUncheckedCreateWithoutEstudianteInput>
}

export type CarreraUpdateWithWhereUniqueWithoutEstudianteInput = {
  where: Prisma.CarreraWhereUniqueInput
  data: Prisma.XOR<Prisma.CarreraUpdateWithoutEstudianteInput, Prisma.CarreraUncheckedUpdateWithoutEstudianteInput>
}

export type CarreraUpdateManyWithWhereWithoutEstudianteInput = {
  where: Prisma.CarreraScalarWhereInput
  data: Prisma.XOR<Prisma.CarreraUpdateManyMutationInput, Prisma.CarreraUncheckedUpdateManyWithoutEstudianteInput>
}

export type CarreraScalarWhereInput = {
  AND?: Prisma.CarreraScalarWhereInput | Prisma.CarreraScalarWhereInput[]
  OR?: Prisma.CarreraScalarWhereInput[]
  NOT?: Prisma.CarreraScalarWhereInput | Prisma.CarreraScalarWhereInput[]
  codigo?: Prisma.StringFilter<"Carrera"> | string
  nombre?: Prisma.StringFilter<"Carrera"> | string
  catalogo?: Prisma.StringFilter<"Carrera"> | string
  estudianteRut?: Prisma.StringNullableFilter<"Carrera"> | string | null
}

export type CarreraCreateManyEstudianteInput = {
  codigo: string
  nombre: string
  catalogo: string
}

export type CarreraUpdateWithoutEstudianteInput = {
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  catalogo?: Prisma.StringFieldUpdateOperationsInput | string
  Proyeccion?: Prisma.ProyeccionUpdateManyWithoutCarreraNestedInput
}

export type CarreraUncheckedUpdateWithoutEstudianteInput = {
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  catalogo?: Prisma.StringFieldUpdateOperationsInput | string
  Proyeccion?: Prisma.ProyeccionUncheckedUpdateManyWithoutCarreraNestedInput
}

export type CarreraUncheckedUpdateManyWithoutEstudianteInput = {
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  catalogo?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type CarreraCountOutputType
 */

export type CarreraCountOutputType = {
  Proyeccion: number
}

export type CarreraCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Proyeccion?: boolean | CarreraCountOutputTypeCountProyeccionArgs
}

/**
 * CarreraCountOutputType without action
 */
export type CarreraCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CarreraCountOutputType
   */
  select?: Prisma.CarreraCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CarreraCountOutputType without action
 */
export type CarreraCountOutputTypeCountProyeccionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProyeccionWhereInput
}


export type CarreraSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  codigo?: boolean
  nombre?: boolean
  catalogo?: boolean
  estudianteRut?: boolean
  Estudiante?: boolean | Prisma.Carrera$EstudianteArgs<ExtArgs>
  Proyeccion?: boolean | Prisma.Carrera$ProyeccionArgs<ExtArgs>
  _count?: boolean | Prisma.CarreraCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["carrera"]>

export type CarreraSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  codigo?: boolean
  nombre?: boolean
  catalogo?: boolean
  estudianteRut?: boolean
  Estudiante?: boolean | Prisma.Carrera$EstudianteArgs<ExtArgs>
}, ExtArgs["result"]["carrera"]>

export type CarreraSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  codigo?: boolean
  nombre?: boolean
  catalogo?: boolean
  estudianteRut?: boolean
  Estudiante?: boolean | Prisma.Carrera$EstudianteArgs<ExtArgs>
}, ExtArgs["result"]["carrera"]>

export type CarreraSelectScalar = {
  codigo?: boolean
  nombre?: boolean
  catalogo?: boolean
  estudianteRut?: boolean
}

export type CarreraOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"codigo" | "nombre" | "catalogo" | "estudianteRut", ExtArgs["result"]["carrera"]>
export type CarreraInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Estudiante?: boolean | Prisma.Carrera$EstudianteArgs<ExtArgs>
  Proyeccion?: boolean | Prisma.Carrera$ProyeccionArgs<ExtArgs>
  _count?: boolean | Prisma.CarreraCountOutputTypeDefaultArgs<ExtArgs>
}
export type CarreraIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Estudiante?: boolean | Prisma.Carrera$EstudianteArgs<ExtArgs>
}
export type CarreraIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Estudiante?: boolean | Prisma.Carrera$EstudianteArgs<ExtArgs>
}

export type $CarreraPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Carrera"
  objects: {
    Estudiante: Prisma.$EstudiantePayload<ExtArgs> | null
    Proyeccion: Prisma.$ProyeccionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    codigo: string
    nombre: string
    catalogo: string
    estudianteRut: string | null
  }, ExtArgs["result"]["carrera"]>
  composites: {}
}

export type CarreraGetPayload<S extends boolean | null | undefined | CarreraDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CarreraPayload, S>

export type CarreraCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CarreraFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CarreraCountAggregateInputType | true
  }

export interface CarreraDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Carrera'], meta: { name: 'Carrera' } }
  /**
   * Find zero or one Carrera that matches the filter.
   * @param {CarreraFindUniqueArgs} args - Arguments to find a Carrera
   * @example
   * // Get one Carrera
   * const carrera = await prisma.carrera.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CarreraFindUniqueArgs>(args: Prisma.SelectSubset<T, CarreraFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CarreraClient<runtime.Types.Result.GetResult<Prisma.$CarreraPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Carrera that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CarreraFindUniqueOrThrowArgs} args - Arguments to find a Carrera
   * @example
   * // Get one Carrera
   * const carrera = await prisma.carrera.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CarreraFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CarreraFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CarreraClient<runtime.Types.Result.GetResult<Prisma.$CarreraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Carrera that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CarreraFindFirstArgs} args - Arguments to find a Carrera
   * @example
   * // Get one Carrera
   * const carrera = await prisma.carrera.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CarreraFindFirstArgs>(args?: Prisma.SelectSubset<T, CarreraFindFirstArgs<ExtArgs>>): Prisma.Prisma__CarreraClient<runtime.Types.Result.GetResult<Prisma.$CarreraPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Carrera that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CarreraFindFirstOrThrowArgs} args - Arguments to find a Carrera
   * @example
   * // Get one Carrera
   * const carrera = await prisma.carrera.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CarreraFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CarreraFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CarreraClient<runtime.Types.Result.GetResult<Prisma.$CarreraPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Carreras that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CarreraFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Carreras
   * const carreras = await prisma.carrera.findMany()
   * 
   * // Get first 10 Carreras
   * const carreras = await prisma.carrera.findMany({ take: 10 })
   * 
   * // Only select the `codigo`
   * const carreraWithCodigoOnly = await prisma.carrera.findMany({ select: { codigo: true } })
   * 
   */
  findMany<T extends CarreraFindManyArgs>(args?: Prisma.SelectSubset<T, CarreraFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CarreraPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Carrera.
   * @param {CarreraCreateArgs} args - Arguments to create a Carrera.
   * @example
   * // Create one Carrera
   * const Carrera = await prisma.carrera.create({
   *   data: {
   *     // ... data to create a Carrera
   *   }
   * })
   * 
   */
  create<T extends CarreraCreateArgs>(args: Prisma.SelectSubset<T, CarreraCreateArgs<ExtArgs>>): Prisma.Prisma__CarreraClient<runtime.Types.Result.GetResult<Prisma.$CarreraPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Carreras.
   * @param {CarreraCreateManyArgs} args - Arguments to create many Carreras.
   * @example
   * // Create many Carreras
   * const carrera = await prisma.carrera.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CarreraCreateManyArgs>(args?: Prisma.SelectSubset<T, CarreraCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Carreras and returns the data saved in the database.
   * @param {CarreraCreateManyAndReturnArgs} args - Arguments to create many Carreras.
   * @example
   * // Create many Carreras
   * const carrera = await prisma.carrera.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Carreras and only return the `codigo`
   * const carreraWithCodigoOnly = await prisma.carrera.createManyAndReturn({
   *   select: { codigo: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CarreraCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CarreraCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CarreraPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Carrera.
   * @param {CarreraDeleteArgs} args - Arguments to delete one Carrera.
   * @example
   * // Delete one Carrera
   * const Carrera = await prisma.carrera.delete({
   *   where: {
   *     // ... filter to delete one Carrera
   *   }
   * })
   * 
   */
  delete<T extends CarreraDeleteArgs>(args: Prisma.SelectSubset<T, CarreraDeleteArgs<ExtArgs>>): Prisma.Prisma__CarreraClient<runtime.Types.Result.GetResult<Prisma.$CarreraPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Carrera.
   * @param {CarreraUpdateArgs} args - Arguments to update one Carrera.
   * @example
   * // Update one Carrera
   * const carrera = await prisma.carrera.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CarreraUpdateArgs>(args: Prisma.SelectSubset<T, CarreraUpdateArgs<ExtArgs>>): Prisma.Prisma__CarreraClient<runtime.Types.Result.GetResult<Prisma.$CarreraPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Carreras.
   * @param {CarreraDeleteManyArgs} args - Arguments to filter Carreras to delete.
   * @example
   * // Delete a few Carreras
   * const { count } = await prisma.carrera.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CarreraDeleteManyArgs>(args?: Prisma.SelectSubset<T, CarreraDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Carreras.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CarreraUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Carreras
   * const carrera = await prisma.carrera.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CarreraUpdateManyArgs>(args: Prisma.SelectSubset<T, CarreraUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Carreras and returns the data updated in the database.
   * @param {CarreraUpdateManyAndReturnArgs} args - Arguments to update many Carreras.
   * @example
   * // Update many Carreras
   * const carrera = await prisma.carrera.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Carreras and only return the `codigo`
   * const carreraWithCodigoOnly = await prisma.carrera.updateManyAndReturn({
   *   select: { codigo: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CarreraUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CarreraUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CarreraPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Carrera.
   * @param {CarreraUpsertArgs} args - Arguments to update or create a Carrera.
   * @example
   * // Update or create a Carrera
   * const carrera = await prisma.carrera.upsert({
   *   create: {
   *     // ... data to create a Carrera
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Carrera we want to update
   *   }
   * })
   */
  upsert<T extends CarreraUpsertArgs>(args: Prisma.SelectSubset<T, CarreraUpsertArgs<ExtArgs>>): Prisma.Prisma__CarreraClient<runtime.Types.Result.GetResult<Prisma.$CarreraPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Carreras.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CarreraCountArgs} args - Arguments to filter Carreras to count.
   * @example
   * // Count the number of Carreras
   * const count = await prisma.carrera.count({
   *   where: {
   *     // ... the filter for the Carreras we want to count
   *   }
   * })
  **/
  count<T extends CarreraCountArgs>(
    args?: Prisma.Subset<T, CarreraCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CarreraCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Carrera.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CarreraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CarreraAggregateArgs>(args: Prisma.Subset<T, CarreraAggregateArgs>): Prisma.PrismaPromise<GetCarreraAggregateType<T>>

  /**
   * Group by Carrera.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CarreraGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CarreraGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CarreraGroupByArgs['orderBy'] }
      : { orderBy?: CarreraGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CarreraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarreraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Carrera model
 */
readonly fields: CarreraFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Carrera.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CarreraClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Estudiante<T extends Prisma.Carrera$EstudianteArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Carrera$EstudianteArgs<ExtArgs>>): Prisma.Prisma__EstudianteClient<runtime.Types.Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  Proyeccion<T extends Prisma.Carrera$ProyeccionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Carrera$ProyeccionArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProyeccionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Carrera model
 */
export interface CarreraFieldRefs {
  readonly codigo: Prisma.FieldRef<"Carrera", 'String'>
  readonly nombre: Prisma.FieldRef<"Carrera", 'String'>
  readonly catalogo: Prisma.FieldRef<"Carrera", 'String'>
  readonly estudianteRut: Prisma.FieldRef<"Carrera", 'String'>
}
    

// Custom InputTypes
/**
 * Carrera findUnique
 */
export type CarreraFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Carrera
   */
  select?: Prisma.CarreraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Carrera
   */
  omit?: Prisma.CarreraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarreraInclude<ExtArgs> | null
  /**
   * Filter, which Carrera to fetch.
   */
  where: Prisma.CarreraWhereUniqueInput
}

/**
 * Carrera findUniqueOrThrow
 */
export type CarreraFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Carrera
   */
  select?: Prisma.CarreraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Carrera
   */
  omit?: Prisma.CarreraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarreraInclude<ExtArgs> | null
  /**
   * Filter, which Carrera to fetch.
   */
  where: Prisma.CarreraWhereUniqueInput
}

/**
 * Carrera findFirst
 */
export type CarreraFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Carrera
   */
  select?: Prisma.CarreraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Carrera
   */
  omit?: Prisma.CarreraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarreraInclude<ExtArgs> | null
  /**
   * Filter, which Carrera to fetch.
   */
  where?: Prisma.CarreraWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Carreras to fetch.
   */
  orderBy?: Prisma.CarreraOrderByWithRelationInput | Prisma.CarreraOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Carreras.
   */
  cursor?: Prisma.CarreraWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Carreras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Carreras.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Carreras.
   */
  distinct?: Prisma.CarreraScalarFieldEnum | Prisma.CarreraScalarFieldEnum[]
}

/**
 * Carrera findFirstOrThrow
 */
export type CarreraFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Carrera
   */
  select?: Prisma.CarreraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Carrera
   */
  omit?: Prisma.CarreraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarreraInclude<ExtArgs> | null
  /**
   * Filter, which Carrera to fetch.
   */
  where?: Prisma.CarreraWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Carreras to fetch.
   */
  orderBy?: Prisma.CarreraOrderByWithRelationInput | Prisma.CarreraOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Carreras.
   */
  cursor?: Prisma.CarreraWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Carreras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Carreras.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Carreras.
   */
  distinct?: Prisma.CarreraScalarFieldEnum | Prisma.CarreraScalarFieldEnum[]
}

/**
 * Carrera findMany
 */
export type CarreraFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Carrera
   */
  select?: Prisma.CarreraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Carrera
   */
  omit?: Prisma.CarreraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarreraInclude<ExtArgs> | null
  /**
   * Filter, which Carreras to fetch.
   */
  where?: Prisma.CarreraWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Carreras to fetch.
   */
  orderBy?: Prisma.CarreraOrderByWithRelationInput | Prisma.CarreraOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Carreras.
   */
  cursor?: Prisma.CarreraWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Carreras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Carreras.
   */
  skip?: number
  distinct?: Prisma.CarreraScalarFieldEnum | Prisma.CarreraScalarFieldEnum[]
}

/**
 * Carrera create
 */
export type CarreraCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Carrera
   */
  select?: Prisma.CarreraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Carrera
   */
  omit?: Prisma.CarreraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarreraInclude<ExtArgs> | null
  /**
   * The data needed to create a Carrera.
   */
  data: Prisma.XOR<Prisma.CarreraCreateInput, Prisma.CarreraUncheckedCreateInput>
}

/**
 * Carrera createMany
 */
export type CarreraCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Carreras.
   */
  data: Prisma.CarreraCreateManyInput | Prisma.CarreraCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Carrera createManyAndReturn
 */
export type CarreraCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Carrera
   */
  select?: Prisma.CarreraSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Carrera
   */
  omit?: Prisma.CarreraOmit<ExtArgs> | null
  /**
   * The data used to create many Carreras.
   */
  data: Prisma.CarreraCreateManyInput | Prisma.CarreraCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarreraIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Carrera update
 */
export type CarreraUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Carrera
   */
  select?: Prisma.CarreraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Carrera
   */
  omit?: Prisma.CarreraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarreraInclude<ExtArgs> | null
  /**
   * The data needed to update a Carrera.
   */
  data: Prisma.XOR<Prisma.CarreraUpdateInput, Prisma.CarreraUncheckedUpdateInput>
  /**
   * Choose, which Carrera to update.
   */
  where: Prisma.CarreraWhereUniqueInput
}

/**
 * Carrera updateMany
 */
export type CarreraUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Carreras.
   */
  data: Prisma.XOR<Prisma.CarreraUpdateManyMutationInput, Prisma.CarreraUncheckedUpdateManyInput>
  /**
   * Filter which Carreras to update
   */
  where?: Prisma.CarreraWhereInput
  /**
   * Limit how many Carreras to update.
   */
  limit?: number
}

/**
 * Carrera updateManyAndReturn
 */
export type CarreraUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Carrera
   */
  select?: Prisma.CarreraSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Carrera
   */
  omit?: Prisma.CarreraOmit<ExtArgs> | null
  /**
   * The data used to update Carreras.
   */
  data: Prisma.XOR<Prisma.CarreraUpdateManyMutationInput, Prisma.CarreraUncheckedUpdateManyInput>
  /**
   * Filter which Carreras to update
   */
  where?: Prisma.CarreraWhereInput
  /**
   * Limit how many Carreras to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarreraIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Carrera upsert
 */
export type CarreraUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Carrera
   */
  select?: Prisma.CarreraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Carrera
   */
  omit?: Prisma.CarreraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarreraInclude<ExtArgs> | null
  /**
   * The filter to search for the Carrera to update in case it exists.
   */
  where: Prisma.CarreraWhereUniqueInput
  /**
   * In case the Carrera found by the `where` argument doesn't exist, create a new Carrera with this data.
   */
  create: Prisma.XOR<Prisma.CarreraCreateInput, Prisma.CarreraUncheckedCreateInput>
  /**
   * In case the Carrera was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CarreraUpdateInput, Prisma.CarreraUncheckedUpdateInput>
}

/**
 * Carrera delete
 */
export type CarreraDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Carrera
   */
  select?: Prisma.CarreraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Carrera
   */
  omit?: Prisma.CarreraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarreraInclude<ExtArgs> | null
  /**
   * Filter which Carrera to delete.
   */
  where: Prisma.CarreraWhereUniqueInput
}

/**
 * Carrera deleteMany
 */
export type CarreraDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Carreras to delete
   */
  where?: Prisma.CarreraWhereInput
  /**
   * Limit how many Carreras to delete.
   */
  limit?: number
}

/**
 * Carrera.Estudiante
 */
export type Carrera$EstudianteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Estudiante
   */
  select?: Prisma.EstudianteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Estudiante
   */
  omit?: Prisma.EstudianteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EstudianteInclude<ExtArgs> | null
  where?: Prisma.EstudianteWhereInput
}

/**
 * Carrera.Proyeccion
 */
export type Carrera$ProyeccionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proyeccion
   */
  select?: Prisma.ProyeccionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proyeccion
   */
  omit?: Prisma.ProyeccionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionInclude<ExtArgs> | null
  where?: Prisma.ProyeccionWhereInput
  orderBy?: Prisma.ProyeccionOrderByWithRelationInput | Prisma.ProyeccionOrderByWithRelationInput[]
  cursor?: Prisma.ProyeccionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProyeccionScalarFieldEnum | Prisma.ProyeccionScalarFieldEnum[]
}

/**
 * Carrera without action
 */
export type CarreraDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Carrera
   */
  select?: Prisma.CarreraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Carrera
   */
  omit?: Prisma.CarreraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarreraInclude<ExtArgs> | null
}
