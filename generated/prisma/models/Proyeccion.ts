
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Proyeccion` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Proyeccion
 * 
 */
export type ProyeccionModel = runtime.Types.Result.DefaultSelection<Prisma.$ProyeccionPayload>

export type AggregateProyeccion = {
  _count: ProyeccionCountAggregateOutputType | null
  _avg: ProyeccionAvgAggregateOutputType | null
  _sum: ProyeccionSumAggregateOutputType | null
  _min: ProyeccionMinAggregateOutputType | null
  _max: ProyeccionMaxAggregateOutputType | null
}

export type ProyeccionAvgAggregateOutputType = {
  id: number | null
}

export type ProyeccionSumAggregateOutputType = {
  id: number | null
}

export type ProyeccionMinAggregateOutputType = {
  id: number | null
  estudianteRut: string | null
  carreraCodigo: string | null
}

export type ProyeccionMaxAggregateOutputType = {
  id: number | null
  estudianteRut: string | null
  carreraCodigo: string | null
}

export type ProyeccionCountAggregateOutputType = {
  id: number
  estudianteRut: number
  carreraCodigo: number
  _all: number
}


export type ProyeccionAvgAggregateInputType = {
  id?: true
}

export type ProyeccionSumAggregateInputType = {
  id?: true
}

export type ProyeccionMinAggregateInputType = {
  id?: true
  estudianteRut?: true
  carreraCodigo?: true
}

export type ProyeccionMaxAggregateInputType = {
  id?: true
  estudianteRut?: true
  carreraCodigo?: true
}

export type ProyeccionCountAggregateInputType = {
  id?: true
  estudianteRut?: true
  carreraCodigo?: true
  _all?: true
}

export type ProyeccionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Proyeccion to aggregate.
   */
  where?: Prisma.ProyeccionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Proyeccions to fetch.
   */
  orderBy?: Prisma.ProyeccionOrderByWithRelationInput | Prisma.ProyeccionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProyeccionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Proyeccions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Proyeccions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Proyeccions
  **/
  _count?: true | ProyeccionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProyeccionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProyeccionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProyeccionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProyeccionMaxAggregateInputType
}

export type GetProyeccionAggregateType<T extends ProyeccionAggregateArgs> = {
      [P in keyof T & keyof AggregateProyeccion]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProyeccion[P]>
    : Prisma.GetScalarType<T[P], AggregateProyeccion[P]>
}




export type ProyeccionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProyeccionWhereInput
  orderBy?: Prisma.ProyeccionOrderByWithAggregationInput | Prisma.ProyeccionOrderByWithAggregationInput[]
  by: Prisma.ProyeccionScalarFieldEnum[] | Prisma.ProyeccionScalarFieldEnum
  having?: Prisma.ProyeccionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProyeccionCountAggregateInputType | true
  _avg?: ProyeccionAvgAggregateInputType
  _sum?: ProyeccionSumAggregateInputType
  _min?: ProyeccionMinAggregateInputType
  _max?: ProyeccionMaxAggregateInputType
}

export type ProyeccionGroupByOutputType = {
  id: number
  estudianteRut: string
  carreraCodigo: string
  _count: ProyeccionCountAggregateOutputType | null
  _avg: ProyeccionAvgAggregateOutputType | null
  _sum: ProyeccionSumAggregateOutputType | null
  _min: ProyeccionMinAggregateOutputType | null
  _max: ProyeccionMaxAggregateOutputType | null
}

type GetProyeccionGroupByPayload<T extends ProyeccionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProyeccionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProyeccionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProyeccionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProyeccionGroupByOutputType[P]>
      }
    >
  >



export type ProyeccionWhereInput = {
  AND?: Prisma.ProyeccionWhereInput | Prisma.ProyeccionWhereInput[]
  OR?: Prisma.ProyeccionWhereInput[]
  NOT?: Prisma.ProyeccionWhereInput | Prisma.ProyeccionWhereInput[]
  id?: Prisma.IntFilter<"Proyeccion"> | number
  estudianteRut?: Prisma.StringFilter<"Proyeccion"> | string
  carreraCodigo?: Prisma.StringFilter<"Proyeccion"> | string
  proyecciones?: Prisma.ProyeccionSemestreListRelationFilter
  estudiante?: Prisma.XOR<Prisma.EstudianteScalarRelationFilter, Prisma.EstudianteWhereInput>
  carrera?: Prisma.XOR<Prisma.CarreraScalarRelationFilter, Prisma.CarreraWhereInput>
}

export type ProyeccionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  estudianteRut?: Prisma.SortOrder
  carreraCodigo?: Prisma.SortOrder
  proyecciones?: Prisma.ProyeccionSemestreOrderByRelationAggregateInput
  estudiante?: Prisma.EstudianteOrderByWithRelationInput
  carrera?: Prisma.CarreraOrderByWithRelationInput
}

export type ProyeccionWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ProyeccionWhereInput | Prisma.ProyeccionWhereInput[]
  OR?: Prisma.ProyeccionWhereInput[]
  NOT?: Prisma.ProyeccionWhereInput | Prisma.ProyeccionWhereInput[]
  estudianteRut?: Prisma.StringFilter<"Proyeccion"> | string
  carreraCodigo?: Prisma.StringFilter<"Proyeccion"> | string
  proyecciones?: Prisma.ProyeccionSemestreListRelationFilter
  estudiante?: Prisma.XOR<Prisma.EstudianteScalarRelationFilter, Prisma.EstudianteWhereInput>
  carrera?: Prisma.XOR<Prisma.CarreraScalarRelationFilter, Prisma.CarreraWhereInput>
}, "id">

export type ProyeccionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  estudianteRut?: Prisma.SortOrder
  carreraCodigo?: Prisma.SortOrder
  _count?: Prisma.ProyeccionCountOrderByAggregateInput
  _avg?: Prisma.ProyeccionAvgOrderByAggregateInput
  _max?: Prisma.ProyeccionMaxOrderByAggregateInput
  _min?: Prisma.ProyeccionMinOrderByAggregateInput
  _sum?: Prisma.ProyeccionSumOrderByAggregateInput
}

export type ProyeccionScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProyeccionScalarWhereWithAggregatesInput | Prisma.ProyeccionScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProyeccionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProyeccionScalarWhereWithAggregatesInput | Prisma.ProyeccionScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Proyeccion"> | number
  estudianteRut?: Prisma.StringWithAggregatesFilter<"Proyeccion"> | string
  carreraCodigo?: Prisma.StringWithAggregatesFilter<"Proyeccion"> | string
}

export type ProyeccionCreateInput = {
  proyecciones?: Prisma.ProyeccionSemestreCreateNestedManyWithoutProyeccionInput
  estudiante: Prisma.EstudianteCreateNestedOneWithoutProyeccionInput
  carrera: Prisma.CarreraCreateNestedOneWithoutProyeccionInput
}

export type ProyeccionUncheckedCreateInput = {
  id?: number
  estudianteRut: string
  carreraCodigo: string
  proyecciones?: Prisma.ProyeccionSemestreUncheckedCreateNestedManyWithoutProyeccionInput
}

export type ProyeccionUpdateInput = {
  proyecciones?: Prisma.ProyeccionSemestreUpdateManyWithoutProyeccionNestedInput
  estudiante?: Prisma.EstudianteUpdateOneRequiredWithoutProyeccionNestedInput
  carrera?: Prisma.CarreraUpdateOneRequiredWithoutProyeccionNestedInput
}

export type ProyeccionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  estudianteRut?: Prisma.StringFieldUpdateOperationsInput | string
  carreraCodigo?: Prisma.StringFieldUpdateOperationsInput | string
  proyecciones?: Prisma.ProyeccionSemestreUncheckedUpdateManyWithoutProyeccionNestedInput
}

export type ProyeccionCreateManyInput = {
  id?: number
  estudianteRut: string
  carreraCodigo: string
}

export type ProyeccionUpdateManyMutationInput = {

}

export type ProyeccionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  estudianteRut?: Prisma.StringFieldUpdateOperationsInput | string
  carreraCodigo?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProyeccionNullableScalarRelationFilter = {
  is?: Prisma.ProyeccionWhereInput | null
  isNot?: Prisma.ProyeccionWhereInput | null
}

export type ProyeccionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  estudianteRut?: Prisma.SortOrder
  carreraCodigo?: Prisma.SortOrder
}

export type ProyeccionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProyeccionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  estudianteRut?: Prisma.SortOrder
  carreraCodigo?: Prisma.SortOrder
}

export type ProyeccionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  estudianteRut?: Prisma.SortOrder
  carreraCodigo?: Prisma.SortOrder
}

export type ProyeccionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProyeccionListRelationFilter = {
  every?: Prisma.ProyeccionWhereInput
  some?: Prisma.ProyeccionWhereInput
  none?: Prisma.ProyeccionWhereInput
}

export type ProyeccionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProyeccionCreateNestedOneWithoutProyeccionesInput = {
  create?: Prisma.XOR<Prisma.ProyeccionCreateWithoutProyeccionesInput, Prisma.ProyeccionUncheckedCreateWithoutProyeccionesInput>
  connectOrCreate?: Prisma.ProyeccionCreateOrConnectWithoutProyeccionesInput
  connect?: Prisma.ProyeccionWhereUniqueInput
}

export type ProyeccionUpdateOneWithoutProyeccionesNestedInput = {
  create?: Prisma.XOR<Prisma.ProyeccionCreateWithoutProyeccionesInput, Prisma.ProyeccionUncheckedCreateWithoutProyeccionesInput>
  connectOrCreate?: Prisma.ProyeccionCreateOrConnectWithoutProyeccionesInput
  upsert?: Prisma.ProyeccionUpsertWithoutProyeccionesInput
  disconnect?: Prisma.ProyeccionWhereInput | boolean
  delete?: Prisma.ProyeccionWhereInput | boolean
  connect?: Prisma.ProyeccionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProyeccionUpdateToOneWithWhereWithoutProyeccionesInput, Prisma.ProyeccionUpdateWithoutProyeccionesInput>, Prisma.ProyeccionUncheckedUpdateWithoutProyeccionesInput>
}

export type ProyeccionCreateNestedManyWithoutCarreraInput = {
  create?: Prisma.XOR<Prisma.ProyeccionCreateWithoutCarreraInput, Prisma.ProyeccionUncheckedCreateWithoutCarreraInput> | Prisma.ProyeccionCreateWithoutCarreraInput[] | Prisma.ProyeccionUncheckedCreateWithoutCarreraInput[]
  connectOrCreate?: Prisma.ProyeccionCreateOrConnectWithoutCarreraInput | Prisma.ProyeccionCreateOrConnectWithoutCarreraInput[]
  createMany?: Prisma.ProyeccionCreateManyCarreraInputEnvelope
  connect?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
}

export type ProyeccionUncheckedCreateNestedManyWithoutCarreraInput = {
  create?: Prisma.XOR<Prisma.ProyeccionCreateWithoutCarreraInput, Prisma.ProyeccionUncheckedCreateWithoutCarreraInput> | Prisma.ProyeccionCreateWithoutCarreraInput[] | Prisma.ProyeccionUncheckedCreateWithoutCarreraInput[]
  connectOrCreate?: Prisma.ProyeccionCreateOrConnectWithoutCarreraInput | Prisma.ProyeccionCreateOrConnectWithoutCarreraInput[]
  createMany?: Prisma.ProyeccionCreateManyCarreraInputEnvelope
  connect?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
}

export type ProyeccionUpdateManyWithoutCarreraNestedInput = {
  create?: Prisma.XOR<Prisma.ProyeccionCreateWithoutCarreraInput, Prisma.ProyeccionUncheckedCreateWithoutCarreraInput> | Prisma.ProyeccionCreateWithoutCarreraInput[] | Prisma.ProyeccionUncheckedCreateWithoutCarreraInput[]
  connectOrCreate?: Prisma.ProyeccionCreateOrConnectWithoutCarreraInput | Prisma.ProyeccionCreateOrConnectWithoutCarreraInput[]
  upsert?: Prisma.ProyeccionUpsertWithWhereUniqueWithoutCarreraInput | Prisma.ProyeccionUpsertWithWhereUniqueWithoutCarreraInput[]
  createMany?: Prisma.ProyeccionCreateManyCarreraInputEnvelope
  set?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
  disconnect?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
  delete?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
  connect?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
  update?: Prisma.ProyeccionUpdateWithWhereUniqueWithoutCarreraInput | Prisma.ProyeccionUpdateWithWhereUniqueWithoutCarreraInput[]
  updateMany?: Prisma.ProyeccionUpdateManyWithWhereWithoutCarreraInput | Prisma.ProyeccionUpdateManyWithWhereWithoutCarreraInput[]
  deleteMany?: Prisma.ProyeccionScalarWhereInput | Prisma.ProyeccionScalarWhereInput[]
}

export type ProyeccionUncheckedUpdateManyWithoutCarreraNestedInput = {
  create?: Prisma.XOR<Prisma.ProyeccionCreateWithoutCarreraInput, Prisma.ProyeccionUncheckedCreateWithoutCarreraInput> | Prisma.ProyeccionCreateWithoutCarreraInput[] | Prisma.ProyeccionUncheckedCreateWithoutCarreraInput[]
  connectOrCreate?: Prisma.ProyeccionCreateOrConnectWithoutCarreraInput | Prisma.ProyeccionCreateOrConnectWithoutCarreraInput[]
  upsert?: Prisma.ProyeccionUpsertWithWhereUniqueWithoutCarreraInput | Prisma.ProyeccionUpsertWithWhereUniqueWithoutCarreraInput[]
  createMany?: Prisma.ProyeccionCreateManyCarreraInputEnvelope
  set?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
  disconnect?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
  delete?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
  connect?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
  update?: Prisma.ProyeccionUpdateWithWhereUniqueWithoutCarreraInput | Prisma.ProyeccionUpdateWithWhereUniqueWithoutCarreraInput[]
  updateMany?: Prisma.ProyeccionUpdateManyWithWhereWithoutCarreraInput | Prisma.ProyeccionUpdateManyWithWhereWithoutCarreraInput[]
  deleteMany?: Prisma.ProyeccionScalarWhereInput | Prisma.ProyeccionScalarWhereInput[]
}

export type ProyeccionCreateNestedManyWithoutEstudianteInput = {
  create?: Prisma.XOR<Prisma.ProyeccionCreateWithoutEstudianteInput, Prisma.ProyeccionUncheckedCreateWithoutEstudianteInput> | Prisma.ProyeccionCreateWithoutEstudianteInput[] | Prisma.ProyeccionUncheckedCreateWithoutEstudianteInput[]
  connectOrCreate?: Prisma.ProyeccionCreateOrConnectWithoutEstudianteInput | Prisma.ProyeccionCreateOrConnectWithoutEstudianteInput[]
  createMany?: Prisma.ProyeccionCreateManyEstudianteInputEnvelope
  connect?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
}

export type ProyeccionUncheckedCreateNestedManyWithoutEstudianteInput = {
  create?: Prisma.XOR<Prisma.ProyeccionCreateWithoutEstudianteInput, Prisma.ProyeccionUncheckedCreateWithoutEstudianteInput> | Prisma.ProyeccionCreateWithoutEstudianteInput[] | Prisma.ProyeccionUncheckedCreateWithoutEstudianteInput[]
  connectOrCreate?: Prisma.ProyeccionCreateOrConnectWithoutEstudianteInput | Prisma.ProyeccionCreateOrConnectWithoutEstudianteInput[]
  createMany?: Prisma.ProyeccionCreateManyEstudianteInputEnvelope
  connect?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
}

export type ProyeccionUpdateManyWithoutEstudianteNestedInput = {
  create?: Prisma.XOR<Prisma.ProyeccionCreateWithoutEstudianteInput, Prisma.ProyeccionUncheckedCreateWithoutEstudianteInput> | Prisma.ProyeccionCreateWithoutEstudianteInput[] | Prisma.ProyeccionUncheckedCreateWithoutEstudianteInput[]
  connectOrCreate?: Prisma.ProyeccionCreateOrConnectWithoutEstudianteInput | Prisma.ProyeccionCreateOrConnectWithoutEstudianteInput[]
  upsert?: Prisma.ProyeccionUpsertWithWhereUniqueWithoutEstudianteInput | Prisma.ProyeccionUpsertWithWhereUniqueWithoutEstudianteInput[]
  createMany?: Prisma.ProyeccionCreateManyEstudianteInputEnvelope
  set?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
  disconnect?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
  delete?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
  connect?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
  update?: Prisma.ProyeccionUpdateWithWhereUniqueWithoutEstudianteInput | Prisma.ProyeccionUpdateWithWhereUniqueWithoutEstudianteInput[]
  updateMany?: Prisma.ProyeccionUpdateManyWithWhereWithoutEstudianteInput | Prisma.ProyeccionUpdateManyWithWhereWithoutEstudianteInput[]
  deleteMany?: Prisma.ProyeccionScalarWhereInput | Prisma.ProyeccionScalarWhereInput[]
}

export type ProyeccionUncheckedUpdateManyWithoutEstudianteNestedInput = {
  create?: Prisma.XOR<Prisma.ProyeccionCreateWithoutEstudianteInput, Prisma.ProyeccionUncheckedCreateWithoutEstudianteInput> | Prisma.ProyeccionCreateWithoutEstudianteInput[] | Prisma.ProyeccionUncheckedCreateWithoutEstudianteInput[]
  connectOrCreate?: Prisma.ProyeccionCreateOrConnectWithoutEstudianteInput | Prisma.ProyeccionCreateOrConnectWithoutEstudianteInput[]
  upsert?: Prisma.ProyeccionUpsertWithWhereUniqueWithoutEstudianteInput | Prisma.ProyeccionUpsertWithWhereUniqueWithoutEstudianteInput[]
  createMany?: Prisma.ProyeccionCreateManyEstudianteInputEnvelope
  set?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
  disconnect?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
  delete?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
  connect?: Prisma.ProyeccionWhereUniqueInput | Prisma.ProyeccionWhereUniqueInput[]
  update?: Prisma.ProyeccionUpdateWithWhereUniqueWithoutEstudianteInput | Prisma.ProyeccionUpdateWithWhereUniqueWithoutEstudianteInput[]
  updateMany?: Prisma.ProyeccionUpdateManyWithWhereWithoutEstudianteInput | Prisma.ProyeccionUpdateManyWithWhereWithoutEstudianteInput[]
  deleteMany?: Prisma.ProyeccionScalarWhereInput | Prisma.ProyeccionScalarWhereInput[]
}

export type ProyeccionCreateWithoutProyeccionesInput = {
  estudiante: Prisma.EstudianteCreateNestedOneWithoutProyeccionInput
  carrera: Prisma.CarreraCreateNestedOneWithoutProyeccionInput
}

export type ProyeccionUncheckedCreateWithoutProyeccionesInput = {
  id?: number
  estudianteRut: string
  carreraCodigo: string
}

export type ProyeccionCreateOrConnectWithoutProyeccionesInput = {
  where: Prisma.ProyeccionWhereUniqueInput
  create: Prisma.XOR<Prisma.ProyeccionCreateWithoutProyeccionesInput, Prisma.ProyeccionUncheckedCreateWithoutProyeccionesInput>
}

export type ProyeccionUpsertWithoutProyeccionesInput = {
  update: Prisma.XOR<Prisma.ProyeccionUpdateWithoutProyeccionesInput, Prisma.ProyeccionUncheckedUpdateWithoutProyeccionesInput>
  create: Prisma.XOR<Prisma.ProyeccionCreateWithoutProyeccionesInput, Prisma.ProyeccionUncheckedCreateWithoutProyeccionesInput>
  where?: Prisma.ProyeccionWhereInput
}

export type ProyeccionUpdateToOneWithWhereWithoutProyeccionesInput = {
  where?: Prisma.ProyeccionWhereInput
  data: Prisma.XOR<Prisma.ProyeccionUpdateWithoutProyeccionesInput, Prisma.ProyeccionUncheckedUpdateWithoutProyeccionesInput>
}

export type ProyeccionUpdateWithoutProyeccionesInput = {
  estudiante?: Prisma.EstudianteUpdateOneRequiredWithoutProyeccionNestedInput
  carrera?: Prisma.CarreraUpdateOneRequiredWithoutProyeccionNestedInput
}

export type ProyeccionUncheckedUpdateWithoutProyeccionesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  estudianteRut?: Prisma.StringFieldUpdateOperationsInput | string
  carreraCodigo?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProyeccionCreateWithoutCarreraInput = {
  proyecciones?: Prisma.ProyeccionSemestreCreateNestedManyWithoutProyeccionInput
  estudiante: Prisma.EstudianteCreateNestedOneWithoutProyeccionInput
}

export type ProyeccionUncheckedCreateWithoutCarreraInput = {
  id?: number
  estudianteRut: string
  proyecciones?: Prisma.ProyeccionSemestreUncheckedCreateNestedManyWithoutProyeccionInput
}

export type ProyeccionCreateOrConnectWithoutCarreraInput = {
  where: Prisma.ProyeccionWhereUniqueInput
  create: Prisma.XOR<Prisma.ProyeccionCreateWithoutCarreraInput, Prisma.ProyeccionUncheckedCreateWithoutCarreraInput>
}

export type ProyeccionCreateManyCarreraInputEnvelope = {
  data: Prisma.ProyeccionCreateManyCarreraInput | Prisma.ProyeccionCreateManyCarreraInput[]
  skipDuplicates?: boolean
}

export type ProyeccionUpsertWithWhereUniqueWithoutCarreraInput = {
  where: Prisma.ProyeccionWhereUniqueInput
  update: Prisma.XOR<Prisma.ProyeccionUpdateWithoutCarreraInput, Prisma.ProyeccionUncheckedUpdateWithoutCarreraInput>
  create: Prisma.XOR<Prisma.ProyeccionCreateWithoutCarreraInput, Prisma.ProyeccionUncheckedCreateWithoutCarreraInput>
}

export type ProyeccionUpdateWithWhereUniqueWithoutCarreraInput = {
  where: Prisma.ProyeccionWhereUniqueInput
  data: Prisma.XOR<Prisma.ProyeccionUpdateWithoutCarreraInput, Prisma.ProyeccionUncheckedUpdateWithoutCarreraInput>
}

export type ProyeccionUpdateManyWithWhereWithoutCarreraInput = {
  where: Prisma.ProyeccionScalarWhereInput
  data: Prisma.XOR<Prisma.ProyeccionUpdateManyMutationInput, Prisma.ProyeccionUncheckedUpdateManyWithoutCarreraInput>
}

export type ProyeccionScalarWhereInput = {
  AND?: Prisma.ProyeccionScalarWhereInput | Prisma.ProyeccionScalarWhereInput[]
  OR?: Prisma.ProyeccionScalarWhereInput[]
  NOT?: Prisma.ProyeccionScalarWhereInput | Prisma.ProyeccionScalarWhereInput[]
  id?: Prisma.IntFilter<"Proyeccion"> | number
  estudianteRut?: Prisma.StringFilter<"Proyeccion"> | string
  carreraCodigo?: Prisma.StringFilter<"Proyeccion"> | string
}

export type ProyeccionCreateWithoutEstudianteInput = {
  proyecciones?: Prisma.ProyeccionSemestreCreateNestedManyWithoutProyeccionInput
  carrera: Prisma.CarreraCreateNestedOneWithoutProyeccionInput
}

export type ProyeccionUncheckedCreateWithoutEstudianteInput = {
  id?: number
  carreraCodigo: string
  proyecciones?: Prisma.ProyeccionSemestreUncheckedCreateNestedManyWithoutProyeccionInput
}

export type ProyeccionCreateOrConnectWithoutEstudianteInput = {
  where: Prisma.ProyeccionWhereUniqueInput
  create: Prisma.XOR<Prisma.ProyeccionCreateWithoutEstudianteInput, Prisma.ProyeccionUncheckedCreateWithoutEstudianteInput>
}

export type ProyeccionCreateManyEstudianteInputEnvelope = {
  data: Prisma.ProyeccionCreateManyEstudianteInput | Prisma.ProyeccionCreateManyEstudianteInput[]
  skipDuplicates?: boolean
}

export type ProyeccionUpsertWithWhereUniqueWithoutEstudianteInput = {
  where: Prisma.ProyeccionWhereUniqueInput
  update: Prisma.XOR<Prisma.ProyeccionUpdateWithoutEstudianteInput, Prisma.ProyeccionUncheckedUpdateWithoutEstudianteInput>
  create: Prisma.XOR<Prisma.ProyeccionCreateWithoutEstudianteInput, Prisma.ProyeccionUncheckedCreateWithoutEstudianteInput>
}

export type ProyeccionUpdateWithWhereUniqueWithoutEstudianteInput = {
  where: Prisma.ProyeccionWhereUniqueInput
  data: Prisma.XOR<Prisma.ProyeccionUpdateWithoutEstudianteInput, Prisma.ProyeccionUncheckedUpdateWithoutEstudianteInput>
}

export type ProyeccionUpdateManyWithWhereWithoutEstudianteInput = {
  where: Prisma.ProyeccionScalarWhereInput
  data: Prisma.XOR<Prisma.ProyeccionUpdateManyMutationInput, Prisma.ProyeccionUncheckedUpdateManyWithoutEstudianteInput>
}

export type ProyeccionCreateManyCarreraInput = {
  id?: number
  estudianteRut: string
}

export type ProyeccionUpdateWithoutCarreraInput = {
  proyecciones?: Prisma.ProyeccionSemestreUpdateManyWithoutProyeccionNestedInput
  estudiante?: Prisma.EstudianteUpdateOneRequiredWithoutProyeccionNestedInput
}

export type ProyeccionUncheckedUpdateWithoutCarreraInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  estudianteRut?: Prisma.StringFieldUpdateOperationsInput | string
  proyecciones?: Prisma.ProyeccionSemestreUncheckedUpdateManyWithoutProyeccionNestedInput
}

export type ProyeccionUncheckedUpdateManyWithoutCarreraInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  estudianteRut?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProyeccionCreateManyEstudianteInput = {
  id?: number
  carreraCodigo: string
}

export type ProyeccionUpdateWithoutEstudianteInput = {
  proyecciones?: Prisma.ProyeccionSemestreUpdateManyWithoutProyeccionNestedInput
  carrera?: Prisma.CarreraUpdateOneRequiredWithoutProyeccionNestedInput
}

export type ProyeccionUncheckedUpdateWithoutEstudianteInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  carreraCodigo?: Prisma.StringFieldUpdateOperationsInput | string
  proyecciones?: Prisma.ProyeccionSemestreUncheckedUpdateManyWithoutProyeccionNestedInput
}

export type ProyeccionUncheckedUpdateManyWithoutEstudianteInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  carreraCodigo?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type ProyeccionCountOutputType
 */

export type ProyeccionCountOutputType = {
  proyecciones: number
}

export type ProyeccionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  proyecciones?: boolean | ProyeccionCountOutputTypeCountProyeccionesArgs
}

/**
 * ProyeccionCountOutputType without action
 */
export type ProyeccionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProyeccionCountOutputType
   */
  select?: Prisma.ProyeccionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProyeccionCountOutputType without action
 */
export type ProyeccionCountOutputTypeCountProyeccionesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProyeccionSemestreWhereInput
}


export type ProyeccionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  estudianteRut?: boolean
  carreraCodigo?: boolean
  proyecciones?: boolean | Prisma.Proyeccion$proyeccionesArgs<ExtArgs>
  estudiante?: boolean | Prisma.EstudianteDefaultArgs<ExtArgs>
  carrera?: boolean | Prisma.CarreraDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.ProyeccionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["proyeccion"]>

export type ProyeccionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  estudianteRut?: boolean
  carreraCodigo?: boolean
  estudiante?: boolean | Prisma.EstudianteDefaultArgs<ExtArgs>
  carrera?: boolean | Prisma.CarreraDefaultArgs<ExtArgs>
}, ExtArgs["result"]["proyeccion"]>

export type ProyeccionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  estudianteRut?: boolean
  carreraCodigo?: boolean
  estudiante?: boolean | Prisma.EstudianteDefaultArgs<ExtArgs>
  carrera?: boolean | Prisma.CarreraDefaultArgs<ExtArgs>
}, ExtArgs["result"]["proyeccion"]>

export type ProyeccionSelectScalar = {
  id?: boolean
  estudianteRut?: boolean
  carreraCodigo?: boolean
}

export type ProyeccionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "estudianteRut" | "carreraCodigo", ExtArgs["result"]["proyeccion"]>
export type ProyeccionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  proyecciones?: boolean | Prisma.Proyeccion$proyeccionesArgs<ExtArgs>
  estudiante?: boolean | Prisma.EstudianteDefaultArgs<ExtArgs>
  carrera?: boolean | Prisma.CarreraDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.ProyeccionCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProyeccionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  estudiante?: boolean | Prisma.EstudianteDefaultArgs<ExtArgs>
  carrera?: boolean | Prisma.CarreraDefaultArgs<ExtArgs>
}
export type ProyeccionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  estudiante?: boolean | Prisma.EstudianteDefaultArgs<ExtArgs>
  carrera?: boolean | Prisma.CarreraDefaultArgs<ExtArgs>
}

export type $ProyeccionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Proyeccion"
  objects: {
    proyecciones: Prisma.$ProyeccionSemestrePayload<ExtArgs>[]
    estudiante: Prisma.$EstudiantePayload<ExtArgs>
    carrera: Prisma.$CarreraPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    estudianteRut: string
    carreraCodigo: string
  }, ExtArgs["result"]["proyeccion"]>
  composites: {}
}

export type ProyeccionGetPayload<S extends boolean | null | undefined | ProyeccionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProyeccionPayload, S>

export type ProyeccionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProyeccionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProyeccionCountAggregateInputType | true
  }

export interface ProyeccionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Proyeccion'], meta: { name: 'Proyeccion' } }
  /**
   * Find zero or one Proyeccion that matches the filter.
   * @param {ProyeccionFindUniqueArgs} args - Arguments to find a Proyeccion
   * @example
   * // Get one Proyeccion
   * const proyeccion = await prisma.proyeccion.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProyeccionFindUniqueArgs>(args: Prisma.SelectSubset<T, ProyeccionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProyeccionClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Proyeccion that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProyeccionFindUniqueOrThrowArgs} args - Arguments to find a Proyeccion
   * @example
   * // Get one Proyeccion
   * const proyeccion = await prisma.proyeccion.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProyeccionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProyeccionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProyeccionClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Proyeccion that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProyeccionFindFirstArgs} args - Arguments to find a Proyeccion
   * @example
   * // Get one Proyeccion
   * const proyeccion = await prisma.proyeccion.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProyeccionFindFirstArgs>(args?: Prisma.SelectSubset<T, ProyeccionFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProyeccionClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Proyeccion that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProyeccionFindFirstOrThrowArgs} args - Arguments to find a Proyeccion
   * @example
   * // Get one Proyeccion
   * const proyeccion = await prisma.proyeccion.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProyeccionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProyeccionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProyeccionClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Proyeccions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProyeccionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Proyeccions
   * const proyeccions = await prisma.proyeccion.findMany()
   * 
   * // Get first 10 Proyeccions
   * const proyeccions = await prisma.proyeccion.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const proyeccionWithIdOnly = await prisma.proyeccion.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProyeccionFindManyArgs>(args?: Prisma.SelectSubset<T, ProyeccionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProyeccionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Proyeccion.
   * @param {ProyeccionCreateArgs} args - Arguments to create a Proyeccion.
   * @example
   * // Create one Proyeccion
   * const Proyeccion = await prisma.proyeccion.create({
   *   data: {
   *     // ... data to create a Proyeccion
   *   }
   * })
   * 
   */
  create<T extends ProyeccionCreateArgs>(args: Prisma.SelectSubset<T, ProyeccionCreateArgs<ExtArgs>>): Prisma.Prisma__ProyeccionClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Proyeccions.
   * @param {ProyeccionCreateManyArgs} args - Arguments to create many Proyeccions.
   * @example
   * // Create many Proyeccions
   * const proyeccion = await prisma.proyeccion.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProyeccionCreateManyArgs>(args?: Prisma.SelectSubset<T, ProyeccionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Proyeccions and returns the data saved in the database.
   * @param {ProyeccionCreateManyAndReturnArgs} args - Arguments to create many Proyeccions.
   * @example
   * // Create many Proyeccions
   * const proyeccion = await prisma.proyeccion.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Proyeccions and only return the `id`
   * const proyeccionWithIdOnly = await prisma.proyeccion.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProyeccionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProyeccionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProyeccionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Proyeccion.
   * @param {ProyeccionDeleteArgs} args - Arguments to delete one Proyeccion.
   * @example
   * // Delete one Proyeccion
   * const Proyeccion = await prisma.proyeccion.delete({
   *   where: {
   *     // ... filter to delete one Proyeccion
   *   }
   * })
   * 
   */
  delete<T extends ProyeccionDeleteArgs>(args: Prisma.SelectSubset<T, ProyeccionDeleteArgs<ExtArgs>>): Prisma.Prisma__ProyeccionClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Proyeccion.
   * @param {ProyeccionUpdateArgs} args - Arguments to update one Proyeccion.
   * @example
   * // Update one Proyeccion
   * const proyeccion = await prisma.proyeccion.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProyeccionUpdateArgs>(args: Prisma.SelectSubset<T, ProyeccionUpdateArgs<ExtArgs>>): Prisma.Prisma__ProyeccionClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Proyeccions.
   * @param {ProyeccionDeleteManyArgs} args - Arguments to filter Proyeccions to delete.
   * @example
   * // Delete a few Proyeccions
   * const { count } = await prisma.proyeccion.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProyeccionDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProyeccionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Proyeccions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProyeccionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Proyeccions
   * const proyeccion = await prisma.proyeccion.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProyeccionUpdateManyArgs>(args: Prisma.SelectSubset<T, ProyeccionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Proyeccions and returns the data updated in the database.
   * @param {ProyeccionUpdateManyAndReturnArgs} args - Arguments to update many Proyeccions.
   * @example
   * // Update many Proyeccions
   * const proyeccion = await prisma.proyeccion.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Proyeccions and only return the `id`
   * const proyeccionWithIdOnly = await prisma.proyeccion.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProyeccionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProyeccionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProyeccionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Proyeccion.
   * @param {ProyeccionUpsertArgs} args - Arguments to update or create a Proyeccion.
   * @example
   * // Update or create a Proyeccion
   * const proyeccion = await prisma.proyeccion.upsert({
   *   create: {
   *     // ... data to create a Proyeccion
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Proyeccion we want to update
   *   }
   * })
   */
  upsert<T extends ProyeccionUpsertArgs>(args: Prisma.SelectSubset<T, ProyeccionUpsertArgs<ExtArgs>>): Prisma.Prisma__ProyeccionClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Proyeccions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProyeccionCountArgs} args - Arguments to filter Proyeccions to count.
   * @example
   * // Count the number of Proyeccions
   * const count = await prisma.proyeccion.count({
   *   where: {
   *     // ... the filter for the Proyeccions we want to count
   *   }
   * })
  **/
  count<T extends ProyeccionCountArgs>(
    args?: Prisma.Subset<T, ProyeccionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProyeccionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Proyeccion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProyeccionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProyeccionAggregateArgs>(args: Prisma.Subset<T, ProyeccionAggregateArgs>): Prisma.PrismaPromise<GetProyeccionAggregateType<T>>

  /**
   * Group by Proyeccion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProyeccionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProyeccionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProyeccionGroupByArgs['orderBy'] }
      : { orderBy?: ProyeccionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProyeccionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProyeccionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Proyeccion model
 */
readonly fields: ProyeccionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Proyeccion.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProyeccionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  proyecciones<T extends Prisma.Proyeccion$proyeccionesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Proyeccion$proyeccionesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProyeccionSemestrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  estudiante<T extends Prisma.EstudianteDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EstudianteDefaultArgs<ExtArgs>>): Prisma.Prisma__EstudianteClient<runtime.Types.Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  carrera<T extends Prisma.CarreraDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CarreraDefaultArgs<ExtArgs>>): Prisma.Prisma__CarreraClient<runtime.Types.Result.GetResult<Prisma.$CarreraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Proyeccion model
 */
export interface ProyeccionFieldRefs {
  readonly id: Prisma.FieldRef<"Proyeccion", 'Int'>
  readonly estudianteRut: Prisma.FieldRef<"Proyeccion", 'String'>
  readonly carreraCodigo: Prisma.FieldRef<"Proyeccion", 'String'>
}
    

// Custom InputTypes
/**
 * Proyeccion findUnique
 */
export type ProyeccionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proyeccion
   */
  select?: Prisma.ProyeccionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proyeccion
   */
  omit?: Prisma.ProyeccionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionInclude<ExtArgs> | null
  /**
   * Filter, which Proyeccion to fetch.
   */
  where: Prisma.ProyeccionWhereUniqueInput
}

/**
 * Proyeccion findUniqueOrThrow
 */
export type ProyeccionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proyeccion
   */
  select?: Prisma.ProyeccionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proyeccion
   */
  omit?: Prisma.ProyeccionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionInclude<ExtArgs> | null
  /**
   * Filter, which Proyeccion to fetch.
   */
  where: Prisma.ProyeccionWhereUniqueInput
}

/**
 * Proyeccion findFirst
 */
export type ProyeccionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proyeccion
   */
  select?: Prisma.ProyeccionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proyeccion
   */
  omit?: Prisma.ProyeccionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionInclude<ExtArgs> | null
  /**
   * Filter, which Proyeccion to fetch.
   */
  where?: Prisma.ProyeccionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Proyeccions to fetch.
   */
  orderBy?: Prisma.ProyeccionOrderByWithRelationInput | Prisma.ProyeccionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Proyeccions.
   */
  cursor?: Prisma.ProyeccionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Proyeccions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Proyeccions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Proyeccions.
   */
  distinct?: Prisma.ProyeccionScalarFieldEnum | Prisma.ProyeccionScalarFieldEnum[]
}

/**
 * Proyeccion findFirstOrThrow
 */
export type ProyeccionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proyeccion
   */
  select?: Prisma.ProyeccionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proyeccion
   */
  omit?: Prisma.ProyeccionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionInclude<ExtArgs> | null
  /**
   * Filter, which Proyeccion to fetch.
   */
  where?: Prisma.ProyeccionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Proyeccions to fetch.
   */
  orderBy?: Prisma.ProyeccionOrderByWithRelationInput | Prisma.ProyeccionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Proyeccions.
   */
  cursor?: Prisma.ProyeccionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Proyeccions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Proyeccions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Proyeccions.
   */
  distinct?: Prisma.ProyeccionScalarFieldEnum | Prisma.ProyeccionScalarFieldEnum[]
}

/**
 * Proyeccion findMany
 */
export type ProyeccionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proyeccion
   */
  select?: Prisma.ProyeccionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proyeccion
   */
  omit?: Prisma.ProyeccionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionInclude<ExtArgs> | null
  /**
   * Filter, which Proyeccions to fetch.
   */
  where?: Prisma.ProyeccionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Proyeccions to fetch.
   */
  orderBy?: Prisma.ProyeccionOrderByWithRelationInput | Prisma.ProyeccionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Proyeccions.
   */
  cursor?: Prisma.ProyeccionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Proyeccions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Proyeccions.
   */
  skip?: number
  distinct?: Prisma.ProyeccionScalarFieldEnum | Prisma.ProyeccionScalarFieldEnum[]
}

/**
 * Proyeccion create
 */
export type ProyeccionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proyeccion
   */
  select?: Prisma.ProyeccionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proyeccion
   */
  omit?: Prisma.ProyeccionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionInclude<ExtArgs> | null
  /**
   * The data needed to create a Proyeccion.
   */
  data: Prisma.XOR<Prisma.ProyeccionCreateInput, Prisma.ProyeccionUncheckedCreateInput>
}

/**
 * Proyeccion createMany
 */
export type ProyeccionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Proyeccions.
   */
  data: Prisma.ProyeccionCreateManyInput | Prisma.ProyeccionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Proyeccion createManyAndReturn
 */
export type ProyeccionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proyeccion
   */
  select?: Prisma.ProyeccionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Proyeccion
   */
  omit?: Prisma.ProyeccionOmit<ExtArgs> | null
  /**
   * The data used to create many Proyeccions.
   */
  data: Prisma.ProyeccionCreateManyInput | Prisma.ProyeccionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Proyeccion update
 */
export type ProyeccionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proyeccion
   */
  select?: Prisma.ProyeccionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proyeccion
   */
  omit?: Prisma.ProyeccionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionInclude<ExtArgs> | null
  /**
   * The data needed to update a Proyeccion.
   */
  data: Prisma.XOR<Prisma.ProyeccionUpdateInput, Prisma.ProyeccionUncheckedUpdateInput>
  /**
   * Choose, which Proyeccion to update.
   */
  where: Prisma.ProyeccionWhereUniqueInput
}

/**
 * Proyeccion updateMany
 */
export type ProyeccionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Proyeccions.
   */
  data: Prisma.XOR<Prisma.ProyeccionUpdateManyMutationInput, Prisma.ProyeccionUncheckedUpdateManyInput>
  /**
   * Filter which Proyeccions to update
   */
  where?: Prisma.ProyeccionWhereInput
  /**
   * Limit how many Proyeccions to update.
   */
  limit?: number
}

/**
 * Proyeccion updateManyAndReturn
 */
export type ProyeccionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proyeccion
   */
  select?: Prisma.ProyeccionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Proyeccion
   */
  omit?: Prisma.ProyeccionOmit<ExtArgs> | null
  /**
   * The data used to update Proyeccions.
   */
  data: Prisma.XOR<Prisma.ProyeccionUpdateManyMutationInput, Prisma.ProyeccionUncheckedUpdateManyInput>
  /**
   * Filter which Proyeccions to update
   */
  where?: Prisma.ProyeccionWhereInput
  /**
   * Limit how many Proyeccions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Proyeccion upsert
 */
export type ProyeccionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proyeccion
   */
  select?: Prisma.ProyeccionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proyeccion
   */
  omit?: Prisma.ProyeccionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionInclude<ExtArgs> | null
  /**
   * The filter to search for the Proyeccion to update in case it exists.
   */
  where: Prisma.ProyeccionWhereUniqueInput
  /**
   * In case the Proyeccion found by the `where` argument doesn't exist, create a new Proyeccion with this data.
   */
  create: Prisma.XOR<Prisma.ProyeccionCreateInput, Prisma.ProyeccionUncheckedCreateInput>
  /**
   * In case the Proyeccion was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProyeccionUpdateInput, Prisma.ProyeccionUncheckedUpdateInput>
}

/**
 * Proyeccion delete
 */
export type ProyeccionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proyeccion
   */
  select?: Prisma.ProyeccionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proyeccion
   */
  omit?: Prisma.ProyeccionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionInclude<ExtArgs> | null
  /**
   * Filter which Proyeccion to delete.
   */
  where: Prisma.ProyeccionWhereUniqueInput
}

/**
 * Proyeccion deleteMany
 */
export type ProyeccionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Proyeccions to delete
   */
  where?: Prisma.ProyeccionWhereInput
  /**
   * Limit how many Proyeccions to delete.
   */
  limit?: number
}

/**
 * Proyeccion.proyecciones
 */
export type Proyeccion$proyeccionesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProyeccionSemestre
   */
  select?: Prisma.ProyeccionSemestreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProyeccionSemestre
   */
  omit?: Prisma.ProyeccionSemestreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionSemestreInclude<ExtArgs> | null
  where?: Prisma.ProyeccionSemestreWhereInput
  orderBy?: Prisma.ProyeccionSemestreOrderByWithRelationInput | Prisma.ProyeccionSemestreOrderByWithRelationInput[]
  cursor?: Prisma.ProyeccionSemestreWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProyeccionSemestreScalarFieldEnum | Prisma.ProyeccionSemestreScalarFieldEnum[]
}

/**
 * Proyeccion without action
 */
export type ProyeccionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proyeccion
   */
  select?: Prisma.ProyeccionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proyeccion
   */
  omit?: Prisma.ProyeccionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionInclude<ExtArgs> | null
}
