
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Estudiante` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Estudiante
 * 
 */
export type EstudianteModel = runtime.Types.Result.DefaultSelection<Prisma.$EstudiantePayload>

export type AggregateEstudiante = {
  _count: EstudianteCountAggregateOutputType | null
  _min: EstudianteMinAggregateOutputType | null
  _max: EstudianteMaxAggregateOutputType | null
}

export type EstudianteMinAggregateOutputType = {
  rut: string | null
}

export type EstudianteMaxAggregateOutputType = {
  rut: string | null
}

export type EstudianteCountAggregateOutputType = {
  rut: number
  _all: number
}


export type EstudianteMinAggregateInputType = {
  rut?: true
}

export type EstudianteMaxAggregateInputType = {
  rut?: true
}

export type EstudianteCountAggregateInputType = {
  rut?: true
  _all?: true
}

export type EstudianteAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Estudiante to aggregate.
   */
  where?: Prisma.EstudianteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Estudiantes to fetch.
   */
  orderBy?: Prisma.EstudianteOrderByWithRelationInput | Prisma.EstudianteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EstudianteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Estudiantes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Estudiantes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Estudiantes
  **/
  _count?: true | EstudianteCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EstudianteMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EstudianteMaxAggregateInputType
}

export type GetEstudianteAggregateType<T extends EstudianteAggregateArgs> = {
      [P in keyof T & keyof AggregateEstudiante]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEstudiante[P]>
    : Prisma.GetScalarType<T[P], AggregateEstudiante[P]>
}




export type EstudianteGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EstudianteWhereInput
  orderBy?: Prisma.EstudianteOrderByWithAggregationInput | Prisma.EstudianteOrderByWithAggregationInput[]
  by: Prisma.EstudianteScalarFieldEnum[] | Prisma.EstudianteScalarFieldEnum
  having?: Prisma.EstudianteScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EstudianteCountAggregateInputType | true
  _min?: EstudianteMinAggregateInputType
  _max?: EstudianteMaxAggregateInputType
}

export type EstudianteGroupByOutputType = {
  rut: string
  _count: EstudianteCountAggregateOutputType | null
  _min: EstudianteMinAggregateOutputType | null
  _max: EstudianteMaxAggregateOutputType | null
}

type GetEstudianteGroupByPayload<T extends EstudianteGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EstudianteGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EstudianteGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EstudianteGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EstudianteGroupByOutputType[P]>
      }
    >
  >



export type EstudianteWhereInput = {
  AND?: Prisma.EstudianteWhereInput | Prisma.EstudianteWhereInput[]
  OR?: Prisma.EstudianteWhereInput[]
  NOT?: Prisma.EstudianteWhereInput | Prisma.EstudianteWhereInput[]
  rut?: Prisma.StringFilter<"Estudiante"> | string
  carreras?: Prisma.CarreraListRelationFilter
  Proyeccion?: Prisma.ProyeccionListRelationFilter
}

export type EstudianteOrderByWithRelationInput = {
  rut?: Prisma.SortOrder
  carreras?: Prisma.CarreraOrderByRelationAggregateInput
  Proyeccion?: Prisma.ProyeccionOrderByRelationAggregateInput
}

export type EstudianteWhereUniqueInput = Prisma.AtLeast<{
  rut?: string
  AND?: Prisma.EstudianteWhereInput | Prisma.EstudianteWhereInput[]
  OR?: Prisma.EstudianteWhereInput[]
  NOT?: Prisma.EstudianteWhereInput | Prisma.EstudianteWhereInput[]
  carreras?: Prisma.CarreraListRelationFilter
  Proyeccion?: Prisma.ProyeccionListRelationFilter
}, "rut">

export type EstudianteOrderByWithAggregationInput = {
  rut?: Prisma.SortOrder
  _count?: Prisma.EstudianteCountOrderByAggregateInput
  _max?: Prisma.EstudianteMaxOrderByAggregateInput
  _min?: Prisma.EstudianteMinOrderByAggregateInput
}

export type EstudianteScalarWhereWithAggregatesInput = {
  AND?: Prisma.EstudianteScalarWhereWithAggregatesInput | Prisma.EstudianteScalarWhereWithAggregatesInput[]
  OR?: Prisma.EstudianteScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EstudianteScalarWhereWithAggregatesInput | Prisma.EstudianteScalarWhereWithAggregatesInput[]
  rut?: Prisma.StringWithAggregatesFilter<"Estudiante"> | string
}

export type EstudianteCreateInput = {
  rut: string
  carreras?: Prisma.CarreraCreateNestedManyWithoutEstudianteInput
  Proyeccion?: Prisma.ProyeccionCreateNestedManyWithoutEstudianteInput
}

export type EstudianteUncheckedCreateInput = {
  rut: string
  carreras?: Prisma.CarreraUncheckedCreateNestedManyWithoutEstudianteInput
  Proyeccion?: Prisma.ProyeccionUncheckedCreateNestedManyWithoutEstudianteInput
}

export type EstudianteUpdateInput = {
  rut?: Prisma.StringFieldUpdateOperationsInput | string
  carreras?: Prisma.CarreraUpdateManyWithoutEstudianteNestedInput
  Proyeccion?: Prisma.ProyeccionUpdateManyWithoutEstudianteNestedInput
}

export type EstudianteUncheckedUpdateInput = {
  rut?: Prisma.StringFieldUpdateOperationsInput | string
  carreras?: Prisma.CarreraUncheckedUpdateManyWithoutEstudianteNestedInput
  Proyeccion?: Prisma.ProyeccionUncheckedUpdateManyWithoutEstudianteNestedInput
}

export type EstudianteCreateManyInput = {
  rut: string
}

export type EstudianteUpdateManyMutationInput = {
  rut?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EstudianteUncheckedUpdateManyInput = {
  rut?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EstudianteScalarRelationFilter = {
  is?: Prisma.EstudianteWhereInput
  isNot?: Prisma.EstudianteWhereInput
}

export type EstudianteNullableScalarRelationFilter = {
  is?: Prisma.EstudianteWhereInput | null
  isNot?: Prisma.EstudianteWhereInput | null
}

export type EstudianteCountOrderByAggregateInput = {
  rut?: Prisma.SortOrder
}

export type EstudianteMaxOrderByAggregateInput = {
  rut?: Prisma.SortOrder
}

export type EstudianteMinOrderByAggregateInput = {
  rut?: Prisma.SortOrder
}

export type EstudianteCreateNestedOneWithoutProyeccionInput = {
  create?: Prisma.XOR<Prisma.EstudianteCreateWithoutProyeccionInput, Prisma.EstudianteUncheckedCreateWithoutProyeccionInput>
  connectOrCreate?: Prisma.EstudianteCreateOrConnectWithoutProyeccionInput
  connect?: Prisma.EstudianteWhereUniqueInput
}

export type EstudianteUpdateOneRequiredWithoutProyeccionNestedInput = {
  create?: Prisma.XOR<Prisma.EstudianteCreateWithoutProyeccionInput, Prisma.EstudianteUncheckedCreateWithoutProyeccionInput>
  connectOrCreate?: Prisma.EstudianteCreateOrConnectWithoutProyeccionInput
  upsert?: Prisma.EstudianteUpsertWithoutProyeccionInput
  connect?: Prisma.EstudianteWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EstudianteUpdateToOneWithWhereWithoutProyeccionInput, Prisma.EstudianteUpdateWithoutProyeccionInput>, Prisma.EstudianteUncheckedUpdateWithoutProyeccionInput>
}

export type EstudianteCreateNestedOneWithoutCarrerasInput = {
  create?: Prisma.XOR<Prisma.EstudianteCreateWithoutCarrerasInput, Prisma.EstudianteUncheckedCreateWithoutCarrerasInput>
  connectOrCreate?: Prisma.EstudianteCreateOrConnectWithoutCarrerasInput
  connect?: Prisma.EstudianteWhereUniqueInput
}

export type EstudianteUpdateOneWithoutCarrerasNestedInput = {
  create?: Prisma.XOR<Prisma.EstudianteCreateWithoutCarrerasInput, Prisma.EstudianteUncheckedCreateWithoutCarrerasInput>
  connectOrCreate?: Prisma.EstudianteCreateOrConnectWithoutCarrerasInput
  upsert?: Prisma.EstudianteUpsertWithoutCarrerasInput
  disconnect?: Prisma.EstudianteWhereInput | boolean
  delete?: Prisma.EstudianteWhereInput | boolean
  connect?: Prisma.EstudianteWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EstudianteUpdateToOneWithWhereWithoutCarrerasInput, Prisma.EstudianteUpdateWithoutCarrerasInput>, Prisma.EstudianteUncheckedUpdateWithoutCarrerasInput>
}

export type EstudianteCreateWithoutProyeccionInput = {
  rut: string
  carreras?: Prisma.CarreraCreateNestedManyWithoutEstudianteInput
}

export type EstudianteUncheckedCreateWithoutProyeccionInput = {
  rut: string
  carreras?: Prisma.CarreraUncheckedCreateNestedManyWithoutEstudianteInput
}

export type EstudianteCreateOrConnectWithoutProyeccionInput = {
  where: Prisma.EstudianteWhereUniqueInput
  create: Prisma.XOR<Prisma.EstudianteCreateWithoutProyeccionInput, Prisma.EstudianteUncheckedCreateWithoutProyeccionInput>
}

export type EstudianteUpsertWithoutProyeccionInput = {
  update: Prisma.XOR<Prisma.EstudianteUpdateWithoutProyeccionInput, Prisma.EstudianteUncheckedUpdateWithoutProyeccionInput>
  create: Prisma.XOR<Prisma.EstudianteCreateWithoutProyeccionInput, Prisma.EstudianteUncheckedCreateWithoutProyeccionInput>
  where?: Prisma.EstudianteWhereInput
}

export type EstudianteUpdateToOneWithWhereWithoutProyeccionInput = {
  where?: Prisma.EstudianteWhereInput
  data: Prisma.XOR<Prisma.EstudianteUpdateWithoutProyeccionInput, Prisma.EstudianteUncheckedUpdateWithoutProyeccionInput>
}

export type EstudianteUpdateWithoutProyeccionInput = {
  rut?: Prisma.StringFieldUpdateOperationsInput | string
  carreras?: Prisma.CarreraUpdateManyWithoutEstudianteNestedInput
}

export type EstudianteUncheckedUpdateWithoutProyeccionInput = {
  rut?: Prisma.StringFieldUpdateOperationsInput | string
  carreras?: Prisma.CarreraUncheckedUpdateManyWithoutEstudianteNestedInput
}

export type EstudianteCreateWithoutCarrerasInput = {
  rut: string
  Proyeccion?: Prisma.ProyeccionCreateNestedManyWithoutEstudianteInput
}

export type EstudianteUncheckedCreateWithoutCarrerasInput = {
  rut: string
  Proyeccion?: Prisma.ProyeccionUncheckedCreateNestedManyWithoutEstudianteInput
}

export type EstudianteCreateOrConnectWithoutCarrerasInput = {
  where: Prisma.EstudianteWhereUniqueInput
  create: Prisma.XOR<Prisma.EstudianteCreateWithoutCarrerasInput, Prisma.EstudianteUncheckedCreateWithoutCarrerasInput>
}

export type EstudianteUpsertWithoutCarrerasInput = {
  update: Prisma.XOR<Prisma.EstudianteUpdateWithoutCarrerasInput, Prisma.EstudianteUncheckedUpdateWithoutCarrerasInput>
  create: Prisma.XOR<Prisma.EstudianteCreateWithoutCarrerasInput, Prisma.EstudianteUncheckedCreateWithoutCarrerasInput>
  where?: Prisma.EstudianteWhereInput
}

export type EstudianteUpdateToOneWithWhereWithoutCarrerasInput = {
  where?: Prisma.EstudianteWhereInput
  data: Prisma.XOR<Prisma.EstudianteUpdateWithoutCarrerasInput, Prisma.EstudianteUncheckedUpdateWithoutCarrerasInput>
}

export type EstudianteUpdateWithoutCarrerasInput = {
  rut?: Prisma.StringFieldUpdateOperationsInput | string
  Proyeccion?: Prisma.ProyeccionUpdateManyWithoutEstudianteNestedInput
}

export type EstudianteUncheckedUpdateWithoutCarrerasInput = {
  rut?: Prisma.StringFieldUpdateOperationsInput | string
  Proyeccion?: Prisma.ProyeccionUncheckedUpdateManyWithoutEstudianteNestedInput
}


/**
 * Count Type EstudianteCountOutputType
 */

export type EstudianteCountOutputType = {
  carreras: number
  Proyeccion: number
}

export type EstudianteCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  carreras?: boolean | EstudianteCountOutputTypeCountCarrerasArgs
  Proyeccion?: boolean | EstudianteCountOutputTypeCountProyeccionArgs
}

/**
 * EstudianteCountOutputType without action
 */
export type EstudianteCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EstudianteCountOutputType
   */
  select?: Prisma.EstudianteCountOutputTypeSelect<ExtArgs> | null
}

/**
 * EstudianteCountOutputType without action
 */
export type EstudianteCountOutputTypeCountCarrerasArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CarreraWhereInput
}

/**
 * EstudianteCountOutputType without action
 */
export type EstudianteCountOutputTypeCountProyeccionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProyeccionWhereInput
}


export type EstudianteSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  rut?: boolean
  carreras?: boolean | Prisma.Estudiante$carrerasArgs<ExtArgs>
  Proyeccion?: boolean | Prisma.Estudiante$ProyeccionArgs<ExtArgs>
  _count?: boolean | Prisma.EstudianteCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["estudiante"]>

export type EstudianteSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  rut?: boolean
}, ExtArgs["result"]["estudiante"]>

export type EstudianteSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  rut?: boolean
}, ExtArgs["result"]["estudiante"]>

export type EstudianteSelectScalar = {
  rut?: boolean
}

export type EstudianteOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"rut", ExtArgs["result"]["estudiante"]>
export type EstudianteInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  carreras?: boolean | Prisma.Estudiante$carrerasArgs<ExtArgs>
  Proyeccion?: boolean | Prisma.Estudiante$ProyeccionArgs<ExtArgs>
  _count?: boolean | Prisma.EstudianteCountOutputTypeDefaultArgs<ExtArgs>
}
export type EstudianteIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type EstudianteIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $EstudiantePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Estudiante"
  objects: {
    carreras: Prisma.$CarreraPayload<ExtArgs>[]
    Proyeccion: Prisma.$ProyeccionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    rut: string
  }, ExtArgs["result"]["estudiante"]>
  composites: {}
}

export type EstudianteGetPayload<S extends boolean | null | undefined | EstudianteDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EstudiantePayload, S>

export type EstudianteCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EstudianteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EstudianteCountAggregateInputType | true
  }

export interface EstudianteDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Estudiante'], meta: { name: 'Estudiante' } }
  /**
   * Find zero or one Estudiante that matches the filter.
   * @param {EstudianteFindUniqueArgs} args - Arguments to find a Estudiante
   * @example
   * // Get one Estudiante
   * const estudiante = await prisma.estudiante.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EstudianteFindUniqueArgs>(args: Prisma.SelectSubset<T, EstudianteFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EstudianteClient<runtime.Types.Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Estudiante that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EstudianteFindUniqueOrThrowArgs} args - Arguments to find a Estudiante
   * @example
   * // Get one Estudiante
   * const estudiante = await prisma.estudiante.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EstudianteFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EstudianteFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EstudianteClient<runtime.Types.Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Estudiante that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EstudianteFindFirstArgs} args - Arguments to find a Estudiante
   * @example
   * // Get one Estudiante
   * const estudiante = await prisma.estudiante.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EstudianteFindFirstArgs>(args?: Prisma.SelectSubset<T, EstudianteFindFirstArgs<ExtArgs>>): Prisma.Prisma__EstudianteClient<runtime.Types.Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Estudiante that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EstudianteFindFirstOrThrowArgs} args - Arguments to find a Estudiante
   * @example
   * // Get one Estudiante
   * const estudiante = await prisma.estudiante.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EstudianteFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EstudianteFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EstudianteClient<runtime.Types.Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Estudiantes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EstudianteFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Estudiantes
   * const estudiantes = await prisma.estudiante.findMany()
   * 
   * // Get first 10 Estudiantes
   * const estudiantes = await prisma.estudiante.findMany({ take: 10 })
   * 
   * // Only select the `rut`
   * const estudianteWithRutOnly = await prisma.estudiante.findMany({ select: { rut: true } })
   * 
   */
  findMany<T extends EstudianteFindManyArgs>(args?: Prisma.SelectSubset<T, EstudianteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Estudiante.
   * @param {EstudianteCreateArgs} args - Arguments to create a Estudiante.
   * @example
   * // Create one Estudiante
   * const Estudiante = await prisma.estudiante.create({
   *   data: {
   *     // ... data to create a Estudiante
   *   }
   * })
   * 
   */
  create<T extends EstudianteCreateArgs>(args: Prisma.SelectSubset<T, EstudianteCreateArgs<ExtArgs>>): Prisma.Prisma__EstudianteClient<runtime.Types.Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Estudiantes.
   * @param {EstudianteCreateManyArgs} args - Arguments to create many Estudiantes.
   * @example
   * // Create many Estudiantes
   * const estudiante = await prisma.estudiante.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EstudianteCreateManyArgs>(args?: Prisma.SelectSubset<T, EstudianteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Estudiantes and returns the data saved in the database.
   * @param {EstudianteCreateManyAndReturnArgs} args - Arguments to create many Estudiantes.
   * @example
   * // Create many Estudiantes
   * const estudiante = await prisma.estudiante.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Estudiantes and only return the `rut`
   * const estudianteWithRutOnly = await prisma.estudiante.createManyAndReturn({
   *   select: { rut: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EstudianteCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EstudianteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Estudiante.
   * @param {EstudianteDeleteArgs} args - Arguments to delete one Estudiante.
   * @example
   * // Delete one Estudiante
   * const Estudiante = await prisma.estudiante.delete({
   *   where: {
   *     // ... filter to delete one Estudiante
   *   }
   * })
   * 
   */
  delete<T extends EstudianteDeleteArgs>(args: Prisma.SelectSubset<T, EstudianteDeleteArgs<ExtArgs>>): Prisma.Prisma__EstudianteClient<runtime.Types.Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Estudiante.
   * @param {EstudianteUpdateArgs} args - Arguments to update one Estudiante.
   * @example
   * // Update one Estudiante
   * const estudiante = await prisma.estudiante.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EstudianteUpdateArgs>(args: Prisma.SelectSubset<T, EstudianteUpdateArgs<ExtArgs>>): Prisma.Prisma__EstudianteClient<runtime.Types.Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Estudiantes.
   * @param {EstudianteDeleteManyArgs} args - Arguments to filter Estudiantes to delete.
   * @example
   * // Delete a few Estudiantes
   * const { count } = await prisma.estudiante.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EstudianteDeleteManyArgs>(args?: Prisma.SelectSubset<T, EstudianteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Estudiantes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EstudianteUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Estudiantes
   * const estudiante = await prisma.estudiante.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EstudianteUpdateManyArgs>(args: Prisma.SelectSubset<T, EstudianteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Estudiantes and returns the data updated in the database.
   * @param {EstudianteUpdateManyAndReturnArgs} args - Arguments to update many Estudiantes.
   * @example
   * // Update many Estudiantes
   * const estudiante = await prisma.estudiante.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Estudiantes and only return the `rut`
   * const estudianteWithRutOnly = await prisma.estudiante.updateManyAndReturn({
   *   select: { rut: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EstudianteUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EstudianteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Estudiante.
   * @param {EstudianteUpsertArgs} args - Arguments to update or create a Estudiante.
   * @example
   * // Update or create a Estudiante
   * const estudiante = await prisma.estudiante.upsert({
   *   create: {
   *     // ... data to create a Estudiante
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Estudiante we want to update
   *   }
   * })
   */
  upsert<T extends EstudianteUpsertArgs>(args: Prisma.SelectSubset<T, EstudianteUpsertArgs<ExtArgs>>): Prisma.Prisma__EstudianteClient<runtime.Types.Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Estudiantes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EstudianteCountArgs} args - Arguments to filter Estudiantes to count.
   * @example
   * // Count the number of Estudiantes
   * const count = await prisma.estudiante.count({
   *   where: {
   *     // ... the filter for the Estudiantes we want to count
   *   }
   * })
  **/
  count<T extends EstudianteCountArgs>(
    args?: Prisma.Subset<T, EstudianteCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EstudianteCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Estudiante.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EstudianteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EstudianteAggregateArgs>(args: Prisma.Subset<T, EstudianteAggregateArgs>): Prisma.PrismaPromise<GetEstudianteAggregateType<T>>

  /**
   * Group by Estudiante.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EstudianteGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EstudianteGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EstudianteGroupByArgs['orderBy'] }
      : { orderBy?: EstudianteGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EstudianteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstudianteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Estudiante model
 */
readonly fields: EstudianteFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Estudiante.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EstudianteClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  carreras<T extends Prisma.Estudiante$carrerasArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Estudiante$carrerasArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CarreraPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Proyeccion<T extends Prisma.Estudiante$ProyeccionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Estudiante$ProyeccionArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProyeccionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Estudiante model
 */
export interface EstudianteFieldRefs {
  readonly rut: Prisma.FieldRef<"Estudiante", 'String'>
}
    

// Custom InputTypes
/**
 * Estudiante findUnique
 */
export type EstudianteFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Estudiante
   */
  select?: Prisma.EstudianteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Estudiante
   */
  omit?: Prisma.EstudianteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EstudianteInclude<ExtArgs> | null
  /**
   * Filter, which Estudiante to fetch.
   */
  where: Prisma.EstudianteWhereUniqueInput
}

/**
 * Estudiante findUniqueOrThrow
 */
export type EstudianteFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Estudiante
   */
  select?: Prisma.EstudianteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Estudiante
   */
  omit?: Prisma.EstudianteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EstudianteInclude<ExtArgs> | null
  /**
   * Filter, which Estudiante to fetch.
   */
  where: Prisma.EstudianteWhereUniqueInput
}

/**
 * Estudiante findFirst
 */
export type EstudianteFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Estudiante
   */
  select?: Prisma.EstudianteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Estudiante
   */
  omit?: Prisma.EstudianteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EstudianteInclude<ExtArgs> | null
  /**
   * Filter, which Estudiante to fetch.
   */
  where?: Prisma.EstudianteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Estudiantes to fetch.
   */
  orderBy?: Prisma.EstudianteOrderByWithRelationInput | Prisma.EstudianteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Estudiantes.
   */
  cursor?: Prisma.EstudianteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Estudiantes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Estudiantes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Estudiantes.
   */
  distinct?: Prisma.EstudianteScalarFieldEnum | Prisma.EstudianteScalarFieldEnum[]
}

/**
 * Estudiante findFirstOrThrow
 */
export type EstudianteFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Estudiante
   */
  select?: Prisma.EstudianteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Estudiante
   */
  omit?: Prisma.EstudianteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EstudianteInclude<ExtArgs> | null
  /**
   * Filter, which Estudiante to fetch.
   */
  where?: Prisma.EstudianteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Estudiantes to fetch.
   */
  orderBy?: Prisma.EstudianteOrderByWithRelationInput | Prisma.EstudianteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Estudiantes.
   */
  cursor?: Prisma.EstudianteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Estudiantes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Estudiantes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Estudiantes.
   */
  distinct?: Prisma.EstudianteScalarFieldEnum | Prisma.EstudianteScalarFieldEnum[]
}

/**
 * Estudiante findMany
 */
export type EstudianteFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Estudiante
   */
  select?: Prisma.EstudianteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Estudiante
   */
  omit?: Prisma.EstudianteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EstudianteInclude<ExtArgs> | null
  /**
   * Filter, which Estudiantes to fetch.
   */
  where?: Prisma.EstudianteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Estudiantes to fetch.
   */
  orderBy?: Prisma.EstudianteOrderByWithRelationInput | Prisma.EstudianteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Estudiantes.
   */
  cursor?: Prisma.EstudianteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Estudiantes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Estudiantes.
   */
  skip?: number
  distinct?: Prisma.EstudianteScalarFieldEnum | Prisma.EstudianteScalarFieldEnum[]
}

/**
 * Estudiante create
 */
export type EstudianteCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Estudiante
   */
  select?: Prisma.EstudianteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Estudiante
   */
  omit?: Prisma.EstudianteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EstudianteInclude<ExtArgs> | null
  /**
   * The data needed to create a Estudiante.
   */
  data: Prisma.XOR<Prisma.EstudianteCreateInput, Prisma.EstudianteUncheckedCreateInput>
}

/**
 * Estudiante createMany
 */
export type EstudianteCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Estudiantes.
   */
  data: Prisma.EstudianteCreateManyInput | Prisma.EstudianteCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Estudiante createManyAndReturn
 */
export type EstudianteCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Estudiante
   */
  select?: Prisma.EstudianteSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Estudiante
   */
  omit?: Prisma.EstudianteOmit<ExtArgs> | null
  /**
   * The data used to create many Estudiantes.
   */
  data: Prisma.EstudianteCreateManyInput | Prisma.EstudianteCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Estudiante update
 */
export type EstudianteUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Estudiante
   */
  select?: Prisma.EstudianteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Estudiante
   */
  omit?: Prisma.EstudianteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EstudianteInclude<ExtArgs> | null
  /**
   * The data needed to update a Estudiante.
   */
  data: Prisma.XOR<Prisma.EstudianteUpdateInput, Prisma.EstudianteUncheckedUpdateInput>
  /**
   * Choose, which Estudiante to update.
   */
  where: Prisma.EstudianteWhereUniqueInput
}

/**
 * Estudiante updateMany
 */
export type EstudianteUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Estudiantes.
   */
  data: Prisma.XOR<Prisma.EstudianteUpdateManyMutationInput, Prisma.EstudianteUncheckedUpdateManyInput>
  /**
   * Filter which Estudiantes to update
   */
  where?: Prisma.EstudianteWhereInput
  /**
   * Limit how many Estudiantes to update.
   */
  limit?: number
}

/**
 * Estudiante updateManyAndReturn
 */
export type EstudianteUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Estudiante
   */
  select?: Prisma.EstudianteSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Estudiante
   */
  omit?: Prisma.EstudianteOmit<ExtArgs> | null
  /**
   * The data used to update Estudiantes.
   */
  data: Prisma.XOR<Prisma.EstudianteUpdateManyMutationInput, Prisma.EstudianteUncheckedUpdateManyInput>
  /**
   * Filter which Estudiantes to update
   */
  where?: Prisma.EstudianteWhereInput
  /**
   * Limit how many Estudiantes to update.
   */
  limit?: number
}

/**
 * Estudiante upsert
 */
export type EstudianteUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Estudiante
   */
  select?: Prisma.EstudianteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Estudiante
   */
  omit?: Prisma.EstudianteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EstudianteInclude<ExtArgs> | null
  /**
   * The filter to search for the Estudiante to update in case it exists.
   */
  where: Prisma.EstudianteWhereUniqueInput
  /**
   * In case the Estudiante found by the `where` argument doesn't exist, create a new Estudiante with this data.
   */
  create: Prisma.XOR<Prisma.EstudianteCreateInput, Prisma.EstudianteUncheckedCreateInput>
  /**
   * In case the Estudiante was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EstudianteUpdateInput, Prisma.EstudianteUncheckedUpdateInput>
}

/**
 * Estudiante delete
 */
export type EstudianteDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Estudiante
   */
  select?: Prisma.EstudianteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Estudiante
   */
  omit?: Prisma.EstudianteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EstudianteInclude<ExtArgs> | null
  /**
   * Filter which Estudiante to delete.
   */
  where: Prisma.EstudianteWhereUniqueInput
}

/**
 * Estudiante deleteMany
 */
export type EstudianteDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Estudiantes to delete
   */
  where?: Prisma.EstudianteWhereInput
  /**
   * Limit how many Estudiantes to delete.
   */
  limit?: number
}

/**
 * Estudiante.carreras
 */
export type Estudiante$carrerasArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Carrera
   */
  select?: Prisma.CarreraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Carrera
   */
  omit?: Prisma.CarreraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarreraInclude<ExtArgs> | null
  where?: Prisma.CarreraWhereInput
  orderBy?: Prisma.CarreraOrderByWithRelationInput | Prisma.CarreraOrderByWithRelationInput[]
  cursor?: Prisma.CarreraWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CarreraScalarFieldEnum | Prisma.CarreraScalarFieldEnum[]
}

/**
 * Estudiante.Proyeccion
 */
export type Estudiante$ProyeccionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proyeccion
   */
  select?: Prisma.ProyeccionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proyeccion
   */
  omit?: Prisma.ProyeccionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionInclude<ExtArgs> | null
  where?: Prisma.ProyeccionWhereInput
  orderBy?: Prisma.ProyeccionOrderByWithRelationInput | Prisma.ProyeccionOrderByWithRelationInput[]
  cursor?: Prisma.ProyeccionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProyeccionScalarFieldEnum | Prisma.ProyeccionScalarFieldEnum[]
}

/**
 * Estudiante without action
 */
export type EstudianteDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Estudiante
   */
  select?: Prisma.EstudianteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Estudiante
   */
  omit?: Prisma.EstudianteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EstudianteInclude<ExtArgs> | null
}
