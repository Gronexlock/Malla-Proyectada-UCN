
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProyeccionSemestre` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ProyeccionSemestre
 * 
 */
export type ProyeccionSemestreModel = runtime.Types.Result.DefaultSelection<Prisma.$ProyeccionSemestrePayload>

export type AggregateProyeccionSemestre = {
  _count: ProyeccionSemestreCountAggregateOutputType | null
  _avg: ProyeccionSemestreAvgAggregateOutputType | null
  _sum: ProyeccionSemestreSumAggregateOutputType | null
  _min: ProyeccionSemestreMinAggregateOutputType | null
  _max: ProyeccionSemestreMaxAggregateOutputType | null
}

export type ProyeccionSemestreAvgAggregateOutputType = {
  id: number | null
  proyeccionId: number | null
}

export type ProyeccionSemestreSumAggregateOutputType = {
  id: number | null
  proyeccionId: number | null
}

export type ProyeccionSemestreMinAggregateOutputType = {
  id: number | null
  semestre: string | null
  proyeccionId: number | null
}

export type ProyeccionSemestreMaxAggregateOutputType = {
  id: number | null
  semestre: string | null
  proyeccionId: number | null
}

export type ProyeccionSemestreCountAggregateOutputType = {
  id: number
  semestre: number
  proyeccionId: number
  _all: number
}


export type ProyeccionSemestreAvgAggregateInputType = {
  id?: true
  proyeccionId?: true
}

export type ProyeccionSemestreSumAggregateInputType = {
  id?: true
  proyeccionId?: true
}

export type ProyeccionSemestreMinAggregateInputType = {
  id?: true
  semestre?: true
  proyeccionId?: true
}

export type ProyeccionSemestreMaxAggregateInputType = {
  id?: true
  semestre?: true
  proyeccionId?: true
}

export type ProyeccionSemestreCountAggregateInputType = {
  id?: true
  semestre?: true
  proyeccionId?: true
  _all?: true
}

export type ProyeccionSemestreAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProyeccionSemestre to aggregate.
   */
  where?: Prisma.ProyeccionSemestreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProyeccionSemestres to fetch.
   */
  orderBy?: Prisma.ProyeccionSemestreOrderByWithRelationInput | Prisma.ProyeccionSemestreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProyeccionSemestreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProyeccionSemestres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProyeccionSemestres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProyeccionSemestres
  **/
  _count?: true | ProyeccionSemestreCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProyeccionSemestreAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProyeccionSemestreSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProyeccionSemestreMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProyeccionSemestreMaxAggregateInputType
}

export type GetProyeccionSemestreAggregateType<T extends ProyeccionSemestreAggregateArgs> = {
      [P in keyof T & keyof AggregateProyeccionSemestre]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProyeccionSemestre[P]>
    : Prisma.GetScalarType<T[P], AggregateProyeccionSemestre[P]>
}




export type ProyeccionSemestreGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProyeccionSemestreWhereInput
  orderBy?: Prisma.ProyeccionSemestreOrderByWithAggregationInput | Prisma.ProyeccionSemestreOrderByWithAggregationInput[]
  by: Prisma.ProyeccionSemestreScalarFieldEnum[] | Prisma.ProyeccionSemestreScalarFieldEnum
  having?: Prisma.ProyeccionSemestreScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProyeccionSemestreCountAggregateInputType | true
  _avg?: ProyeccionSemestreAvgAggregateInputType
  _sum?: ProyeccionSemestreSumAggregateInputType
  _min?: ProyeccionSemestreMinAggregateInputType
  _max?: ProyeccionSemestreMaxAggregateInputType
}

export type ProyeccionSemestreGroupByOutputType = {
  id: number
  semestre: string
  proyeccionId: number | null
  _count: ProyeccionSemestreCountAggregateOutputType | null
  _avg: ProyeccionSemestreAvgAggregateOutputType | null
  _sum: ProyeccionSemestreSumAggregateOutputType | null
  _min: ProyeccionSemestreMinAggregateOutputType | null
  _max: ProyeccionSemestreMaxAggregateOutputType | null
}

type GetProyeccionSemestreGroupByPayload<T extends ProyeccionSemestreGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProyeccionSemestreGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProyeccionSemestreGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProyeccionSemestreGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProyeccionSemestreGroupByOutputType[P]>
      }
    >
  >



export type ProyeccionSemestreWhereInput = {
  AND?: Prisma.ProyeccionSemestreWhereInput | Prisma.ProyeccionSemestreWhereInput[]
  OR?: Prisma.ProyeccionSemestreWhereInput[]
  NOT?: Prisma.ProyeccionSemestreWhereInput | Prisma.ProyeccionSemestreWhereInput[]
  id?: Prisma.IntFilter<"ProyeccionSemestre"> | number
  semestre?: Prisma.StringFilter<"ProyeccionSemestre"> | string
  proyeccionId?: Prisma.IntNullableFilter<"ProyeccionSemestre"> | number | null
  cursos?: Prisma.CursoListRelationFilter
  Proyeccion?: Prisma.XOR<Prisma.ProyeccionNullableScalarRelationFilter, Prisma.ProyeccionWhereInput> | null
}

export type ProyeccionSemestreOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  semestre?: Prisma.SortOrder
  proyeccionId?: Prisma.SortOrderInput | Prisma.SortOrder
  cursos?: Prisma.CursoOrderByRelationAggregateInput
  Proyeccion?: Prisma.ProyeccionOrderByWithRelationInput
}

export type ProyeccionSemestreWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ProyeccionSemestreWhereInput | Prisma.ProyeccionSemestreWhereInput[]
  OR?: Prisma.ProyeccionSemestreWhereInput[]
  NOT?: Prisma.ProyeccionSemestreWhereInput | Prisma.ProyeccionSemestreWhereInput[]
  semestre?: Prisma.StringFilter<"ProyeccionSemestre"> | string
  proyeccionId?: Prisma.IntNullableFilter<"ProyeccionSemestre"> | number | null
  cursos?: Prisma.CursoListRelationFilter
  Proyeccion?: Prisma.XOR<Prisma.ProyeccionNullableScalarRelationFilter, Prisma.ProyeccionWhereInput> | null
}, "id">

export type ProyeccionSemestreOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  semestre?: Prisma.SortOrder
  proyeccionId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ProyeccionSemestreCountOrderByAggregateInput
  _avg?: Prisma.ProyeccionSemestreAvgOrderByAggregateInput
  _max?: Prisma.ProyeccionSemestreMaxOrderByAggregateInput
  _min?: Prisma.ProyeccionSemestreMinOrderByAggregateInput
  _sum?: Prisma.ProyeccionSemestreSumOrderByAggregateInput
}

export type ProyeccionSemestreScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProyeccionSemestreScalarWhereWithAggregatesInput | Prisma.ProyeccionSemestreScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProyeccionSemestreScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProyeccionSemestreScalarWhereWithAggregatesInput | Prisma.ProyeccionSemestreScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ProyeccionSemestre"> | number
  semestre?: Prisma.StringWithAggregatesFilter<"ProyeccionSemestre"> | string
  proyeccionId?: Prisma.IntNullableWithAggregatesFilter<"ProyeccionSemestre"> | number | null
}

export type ProyeccionSemestreCreateInput = {
  semestre: string
  cursos?: Prisma.CursoCreateNestedManyWithoutProyeccionSemestreInput
  Proyeccion?: Prisma.ProyeccionCreateNestedOneWithoutProyeccionesInput
}

export type ProyeccionSemestreUncheckedCreateInput = {
  id?: number
  semestre: string
  proyeccionId?: number | null
  cursos?: Prisma.CursoUncheckedCreateNestedManyWithoutProyeccionSemestreInput
}

export type ProyeccionSemestreUpdateInput = {
  semestre?: Prisma.StringFieldUpdateOperationsInput | string
  cursos?: Prisma.CursoUpdateManyWithoutProyeccionSemestreNestedInput
  Proyeccion?: Prisma.ProyeccionUpdateOneWithoutProyeccionesNestedInput
}

export type ProyeccionSemestreUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  semestre?: Prisma.StringFieldUpdateOperationsInput | string
  proyeccionId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  cursos?: Prisma.CursoUncheckedUpdateManyWithoutProyeccionSemestreNestedInput
}

export type ProyeccionSemestreCreateManyInput = {
  id?: number
  semestre: string
  proyeccionId?: number | null
}

export type ProyeccionSemestreUpdateManyMutationInput = {
  semestre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProyeccionSemestreUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  semestre?: Prisma.StringFieldUpdateOperationsInput | string
  proyeccionId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ProyeccionSemestreNullableScalarRelationFilter = {
  is?: Prisma.ProyeccionSemestreWhereInput | null
  isNot?: Prisma.ProyeccionSemestreWhereInput | null
}

export type ProyeccionSemestreCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  semestre?: Prisma.SortOrder
  proyeccionId?: Prisma.SortOrder
}

export type ProyeccionSemestreAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  proyeccionId?: Prisma.SortOrder
}

export type ProyeccionSemestreMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  semestre?: Prisma.SortOrder
  proyeccionId?: Prisma.SortOrder
}

export type ProyeccionSemestreMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  semestre?: Prisma.SortOrder
  proyeccionId?: Prisma.SortOrder
}

export type ProyeccionSemestreSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  proyeccionId?: Prisma.SortOrder
}

export type ProyeccionSemestreListRelationFilter = {
  every?: Prisma.ProyeccionSemestreWhereInput
  some?: Prisma.ProyeccionSemestreWhereInput
  none?: Prisma.ProyeccionSemestreWhereInput
}

export type ProyeccionSemestreOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProyeccionSemestreCreateNestedOneWithoutCursosInput = {
  create?: Prisma.XOR<Prisma.ProyeccionSemestreCreateWithoutCursosInput, Prisma.ProyeccionSemestreUncheckedCreateWithoutCursosInput>
  connectOrCreate?: Prisma.ProyeccionSemestreCreateOrConnectWithoutCursosInput
  connect?: Prisma.ProyeccionSemestreWhereUniqueInput
}

export type ProyeccionSemestreUpdateOneWithoutCursosNestedInput = {
  create?: Prisma.XOR<Prisma.ProyeccionSemestreCreateWithoutCursosInput, Prisma.ProyeccionSemestreUncheckedCreateWithoutCursosInput>
  connectOrCreate?: Prisma.ProyeccionSemestreCreateOrConnectWithoutCursosInput
  upsert?: Prisma.ProyeccionSemestreUpsertWithoutCursosInput
  disconnect?: Prisma.ProyeccionSemestreWhereInput | boolean
  delete?: Prisma.ProyeccionSemestreWhereInput | boolean
  connect?: Prisma.ProyeccionSemestreWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProyeccionSemestreUpdateToOneWithWhereWithoutCursosInput, Prisma.ProyeccionSemestreUpdateWithoutCursosInput>, Prisma.ProyeccionSemestreUncheckedUpdateWithoutCursosInput>
}

export type ProyeccionSemestreCreateNestedManyWithoutProyeccionInput = {
  create?: Prisma.XOR<Prisma.ProyeccionSemestreCreateWithoutProyeccionInput, Prisma.ProyeccionSemestreUncheckedCreateWithoutProyeccionInput> | Prisma.ProyeccionSemestreCreateWithoutProyeccionInput[] | Prisma.ProyeccionSemestreUncheckedCreateWithoutProyeccionInput[]
  connectOrCreate?: Prisma.ProyeccionSemestreCreateOrConnectWithoutProyeccionInput | Prisma.ProyeccionSemestreCreateOrConnectWithoutProyeccionInput[]
  createMany?: Prisma.ProyeccionSemestreCreateManyProyeccionInputEnvelope
  connect?: Prisma.ProyeccionSemestreWhereUniqueInput | Prisma.ProyeccionSemestreWhereUniqueInput[]
}

export type ProyeccionSemestreUncheckedCreateNestedManyWithoutProyeccionInput = {
  create?: Prisma.XOR<Prisma.ProyeccionSemestreCreateWithoutProyeccionInput, Prisma.ProyeccionSemestreUncheckedCreateWithoutProyeccionInput> | Prisma.ProyeccionSemestreCreateWithoutProyeccionInput[] | Prisma.ProyeccionSemestreUncheckedCreateWithoutProyeccionInput[]
  connectOrCreate?: Prisma.ProyeccionSemestreCreateOrConnectWithoutProyeccionInput | Prisma.ProyeccionSemestreCreateOrConnectWithoutProyeccionInput[]
  createMany?: Prisma.ProyeccionSemestreCreateManyProyeccionInputEnvelope
  connect?: Prisma.ProyeccionSemestreWhereUniqueInput | Prisma.ProyeccionSemestreWhereUniqueInput[]
}

export type ProyeccionSemestreUpdateManyWithoutProyeccionNestedInput = {
  create?: Prisma.XOR<Prisma.ProyeccionSemestreCreateWithoutProyeccionInput, Prisma.ProyeccionSemestreUncheckedCreateWithoutProyeccionInput> | Prisma.ProyeccionSemestreCreateWithoutProyeccionInput[] | Prisma.ProyeccionSemestreUncheckedCreateWithoutProyeccionInput[]
  connectOrCreate?: Prisma.ProyeccionSemestreCreateOrConnectWithoutProyeccionInput | Prisma.ProyeccionSemestreCreateOrConnectWithoutProyeccionInput[]
  upsert?: Prisma.ProyeccionSemestreUpsertWithWhereUniqueWithoutProyeccionInput | Prisma.ProyeccionSemestreUpsertWithWhereUniqueWithoutProyeccionInput[]
  createMany?: Prisma.ProyeccionSemestreCreateManyProyeccionInputEnvelope
  set?: Prisma.ProyeccionSemestreWhereUniqueInput | Prisma.ProyeccionSemestreWhereUniqueInput[]
  disconnect?: Prisma.ProyeccionSemestreWhereUniqueInput | Prisma.ProyeccionSemestreWhereUniqueInput[]
  delete?: Prisma.ProyeccionSemestreWhereUniqueInput | Prisma.ProyeccionSemestreWhereUniqueInput[]
  connect?: Prisma.ProyeccionSemestreWhereUniqueInput | Prisma.ProyeccionSemestreWhereUniqueInput[]
  update?: Prisma.ProyeccionSemestreUpdateWithWhereUniqueWithoutProyeccionInput | Prisma.ProyeccionSemestreUpdateWithWhereUniqueWithoutProyeccionInput[]
  updateMany?: Prisma.ProyeccionSemestreUpdateManyWithWhereWithoutProyeccionInput | Prisma.ProyeccionSemestreUpdateManyWithWhereWithoutProyeccionInput[]
  deleteMany?: Prisma.ProyeccionSemestreScalarWhereInput | Prisma.ProyeccionSemestreScalarWhereInput[]
}

export type ProyeccionSemestreUncheckedUpdateManyWithoutProyeccionNestedInput = {
  create?: Prisma.XOR<Prisma.ProyeccionSemestreCreateWithoutProyeccionInput, Prisma.ProyeccionSemestreUncheckedCreateWithoutProyeccionInput> | Prisma.ProyeccionSemestreCreateWithoutProyeccionInput[] | Prisma.ProyeccionSemestreUncheckedCreateWithoutProyeccionInput[]
  connectOrCreate?: Prisma.ProyeccionSemestreCreateOrConnectWithoutProyeccionInput | Prisma.ProyeccionSemestreCreateOrConnectWithoutProyeccionInput[]
  upsert?: Prisma.ProyeccionSemestreUpsertWithWhereUniqueWithoutProyeccionInput | Prisma.ProyeccionSemestreUpsertWithWhereUniqueWithoutProyeccionInput[]
  createMany?: Prisma.ProyeccionSemestreCreateManyProyeccionInputEnvelope
  set?: Prisma.ProyeccionSemestreWhereUniqueInput | Prisma.ProyeccionSemestreWhereUniqueInput[]
  disconnect?: Prisma.ProyeccionSemestreWhereUniqueInput | Prisma.ProyeccionSemestreWhereUniqueInput[]
  delete?: Prisma.ProyeccionSemestreWhereUniqueInput | Prisma.ProyeccionSemestreWhereUniqueInput[]
  connect?: Prisma.ProyeccionSemestreWhereUniqueInput | Prisma.ProyeccionSemestreWhereUniqueInput[]
  update?: Prisma.ProyeccionSemestreUpdateWithWhereUniqueWithoutProyeccionInput | Prisma.ProyeccionSemestreUpdateWithWhereUniqueWithoutProyeccionInput[]
  updateMany?: Prisma.ProyeccionSemestreUpdateManyWithWhereWithoutProyeccionInput | Prisma.ProyeccionSemestreUpdateManyWithWhereWithoutProyeccionInput[]
  deleteMany?: Prisma.ProyeccionSemestreScalarWhereInput | Prisma.ProyeccionSemestreScalarWhereInput[]
}

export type ProyeccionSemestreCreateWithoutCursosInput = {
  semestre: string
  Proyeccion?: Prisma.ProyeccionCreateNestedOneWithoutProyeccionesInput
}

export type ProyeccionSemestreUncheckedCreateWithoutCursosInput = {
  id?: number
  semestre: string
  proyeccionId?: number | null
}

export type ProyeccionSemestreCreateOrConnectWithoutCursosInput = {
  where: Prisma.ProyeccionSemestreWhereUniqueInput
  create: Prisma.XOR<Prisma.ProyeccionSemestreCreateWithoutCursosInput, Prisma.ProyeccionSemestreUncheckedCreateWithoutCursosInput>
}

export type ProyeccionSemestreUpsertWithoutCursosInput = {
  update: Prisma.XOR<Prisma.ProyeccionSemestreUpdateWithoutCursosInput, Prisma.ProyeccionSemestreUncheckedUpdateWithoutCursosInput>
  create: Prisma.XOR<Prisma.ProyeccionSemestreCreateWithoutCursosInput, Prisma.ProyeccionSemestreUncheckedCreateWithoutCursosInput>
  where?: Prisma.ProyeccionSemestreWhereInput
}

export type ProyeccionSemestreUpdateToOneWithWhereWithoutCursosInput = {
  where?: Prisma.ProyeccionSemestreWhereInput
  data: Prisma.XOR<Prisma.ProyeccionSemestreUpdateWithoutCursosInput, Prisma.ProyeccionSemestreUncheckedUpdateWithoutCursosInput>
}

export type ProyeccionSemestreUpdateWithoutCursosInput = {
  semestre?: Prisma.StringFieldUpdateOperationsInput | string
  Proyeccion?: Prisma.ProyeccionUpdateOneWithoutProyeccionesNestedInput
}

export type ProyeccionSemestreUncheckedUpdateWithoutCursosInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  semestre?: Prisma.StringFieldUpdateOperationsInput | string
  proyeccionId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ProyeccionSemestreCreateWithoutProyeccionInput = {
  semestre: string
  cursos?: Prisma.CursoCreateNestedManyWithoutProyeccionSemestreInput
}

export type ProyeccionSemestreUncheckedCreateWithoutProyeccionInput = {
  id?: number
  semestre: string
  cursos?: Prisma.CursoUncheckedCreateNestedManyWithoutProyeccionSemestreInput
}

export type ProyeccionSemestreCreateOrConnectWithoutProyeccionInput = {
  where: Prisma.ProyeccionSemestreWhereUniqueInput
  create: Prisma.XOR<Prisma.ProyeccionSemestreCreateWithoutProyeccionInput, Prisma.ProyeccionSemestreUncheckedCreateWithoutProyeccionInput>
}

export type ProyeccionSemestreCreateManyProyeccionInputEnvelope = {
  data: Prisma.ProyeccionSemestreCreateManyProyeccionInput | Prisma.ProyeccionSemestreCreateManyProyeccionInput[]
  skipDuplicates?: boolean
}

export type ProyeccionSemestreUpsertWithWhereUniqueWithoutProyeccionInput = {
  where: Prisma.ProyeccionSemestreWhereUniqueInput
  update: Prisma.XOR<Prisma.ProyeccionSemestreUpdateWithoutProyeccionInput, Prisma.ProyeccionSemestreUncheckedUpdateWithoutProyeccionInput>
  create: Prisma.XOR<Prisma.ProyeccionSemestreCreateWithoutProyeccionInput, Prisma.ProyeccionSemestreUncheckedCreateWithoutProyeccionInput>
}

export type ProyeccionSemestreUpdateWithWhereUniqueWithoutProyeccionInput = {
  where: Prisma.ProyeccionSemestreWhereUniqueInput
  data: Prisma.XOR<Prisma.ProyeccionSemestreUpdateWithoutProyeccionInput, Prisma.ProyeccionSemestreUncheckedUpdateWithoutProyeccionInput>
}

export type ProyeccionSemestreUpdateManyWithWhereWithoutProyeccionInput = {
  where: Prisma.ProyeccionSemestreScalarWhereInput
  data: Prisma.XOR<Prisma.ProyeccionSemestreUpdateManyMutationInput, Prisma.ProyeccionSemestreUncheckedUpdateManyWithoutProyeccionInput>
}

export type ProyeccionSemestreScalarWhereInput = {
  AND?: Prisma.ProyeccionSemestreScalarWhereInput | Prisma.ProyeccionSemestreScalarWhereInput[]
  OR?: Prisma.ProyeccionSemestreScalarWhereInput[]
  NOT?: Prisma.ProyeccionSemestreScalarWhereInput | Prisma.ProyeccionSemestreScalarWhereInput[]
  id?: Prisma.IntFilter<"ProyeccionSemestre"> | number
  semestre?: Prisma.StringFilter<"ProyeccionSemestre"> | string
  proyeccionId?: Prisma.IntNullableFilter<"ProyeccionSemestre"> | number | null
}

export type ProyeccionSemestreCreateManyProyeccionInput = {
  id?: number
  semestre: string
}

export type ProyeccionSemestreUpdateWithoutProyeccionInput = {
  semestre?: Prisma.StringFieldUpdateOperationsInput | string
  cursos?: Prisma.CursoUpdateManyWithoutProyeccionSemestreNestedInput
}

export type ProyeccionSemestreUncheckedUpdateWithoutProyeccionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  semestre?: Prisma.StringFieldUpdateOperationsInput | string
  cursos?: Prisma.CursoUncheckedUpdateManyWithoutProyeccionSemestreNestedInput
}

export type ProyeccionSemestreUncheckedUpdateManyWithoutProyeccionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  semestre?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type ProyeccionSemestreCountOutputType
 */

export type ProyeccionSemestreCountOutputType = {
  cursos: number
}

export type ProyeccionSemestreCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  cursos?: boolean | ProyeccionSemestreCountOutputTypeCountCursosArgs
}

/**
 * ProyeccionSemestreCountOutputType without action
 */
export type ProyeccionSemestreCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProyeccionSemestreCountOutputType
   */
  select?: Prisma.ProyeccionSemestreCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProyeccionSemestreCountOutputType without action
 */
export type ProyeccionSemestreCountOutputTypeCountCursosArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CursoWhereInput
}


export type ProyeccionSemestreSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  semestre?: boolean
  proyeccionId?: boolean
  cursos?: boolean | Prisma.ProyeccionSemestre$cursosArgs<ExtArgs>
  Proyeccion?: boolean | Prisma.ProyeccionSemestre$ProyeccionArgs<ExtArgs>
  _count?: boolean | Prisma.ProyeccionSemestreCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["proyeccionSemestre"]>

export type ProyeccionSemestreSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  semestre?: boolean
  proyeccionId?: boolean
  Proyeccion?: boolean | Prisma.ProyeccionSemestre$ProyeccionArgs<ExtArgs>
}, ExtArgs["result"]["proyeccionSemestre"]>

export type ProyeccionSemestreSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  semestre?: boolean
  proyeccionId?: boolean
  Proyeccion?: boolean | Prisma.ProyeccionSemestre$ProyeccionArgs<ExtArgs>
}, ExtArgs["result"]["proyeccionSemestre"]>

export type ProyeccionSemestreSelectScalar = {
  id?: boolean
  semestre?: boolean
  proyeccionId?: boolean
}

export type ProyeccionSemestreOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "semestre" | "proyeccionId", ExtArgs["result"]["proyeccionSemestre"]>
export type ProyeccionSemestreInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  cursos?: boolean | Prisma.ProyeccionSemestre$cursosArgs<ExtArgs>
  Proyeccion?: boolean | Prisma.ProyeccionSemestre$ProyeccionArgs<ExtArgs>
  _count?: boolean | Prisma.ProyeccionSemestreCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProyeccionSemestreIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Proyeccion?: boolean | Prisma.ProyeccionSemestre$ProyeccionArgs<ExtArgs>
}
export type ProyeccionSemestreIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Proyeccion?: boolean | Prisma.ProyeccionSemestre$ProyeccionArgs<ExtArgs>
}

export type $ProyeccionSemestrePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProyeccionSemestre"
  objects: {
    cursos: Prisma.$CursoPayload<ExtArgs>[]
    Proyeccion: Prisma.$ProyeccionPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    semestre: string
    proyeccionId: number | null
  }, ExtArgs["result"]["proyeccionSemestre"]>
  composites: {}
}

export type ProyeccionSemestreGetPayload<S extends boolean | null | undefined | ProyeccionSemestreDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProyeccionSemestrePayload, S>

export type ProyeccionSemestreCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProyeccionSemestreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProyeccionSemestreCountAggregateInputType | true
  }

export interface ProyeccionSemestreDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProyeccionSemestre'], meta: { name: 'ProyeccionSemestre' } }
  /**
   * Find zero or one ProyeccionSemestre that matches the filter.
   * @param {ProyeccionSemestreFindUniqueArgs} args - Arguments to find a ProyeccionSemestre
   * @example
   * // Get one ProyeccionSemestre
   * const proyeccionSemestre = await prisma.proyeccionSemestre.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProyeccionSemestreFindUniqueArgs>(args: Prisma.SelectSubset<T, ProyeccionSemestreFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProyeccionSemestreClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionSemestrePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProyeccionSemestre that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProyeccionSemestreFindUniqueOrThrowArgs} args - Arguments to find a ProyeccionSemestre
   * @example
   * // Get one ProyeccionSemestre
   * const proyeccionSemestre = await prisma.proyeccionSemestre.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProyeccionSemestreFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProyeccionSemestreFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProyeccionSemestreClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionSemestrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProyeccionSemestre that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProyeccionSemestreFindFirstArgs} args - Arguments to find a ProyeccionSemestre
   * @example
   * // Get one ProyeccionSemestre
   * const proyeccionSemestre = await prisma.proyeccionSemestre.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProyeccionSemestreFindFirstArgs>(args?: Prisma.SelectSubset<T, ProyeccionSemestreFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProyeccionSemestreClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionSemestrePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProyeccionSemestre that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProyeccionSemestreFindFirstOrThrowArgs} args - Arguments to find a ProyeccionSemestre
   * @example
   * // Get one ProyeccionSemestre
   * const proyeccionSemestre = await prisma.proyeccionSemestre.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProyeccionSemestreFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProyeccionSemestreFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProyeccionSemestreClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionSemestrePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProyeccionSemestres that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProyeccionSemestreFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProyeccionSemestres
   * const proyeccionSemestres = await prisma.proyeccionSemestre.findMany()
   * 
   * // Get first 10 ProyeccionSemestres
   * const proyeccionSemestres = await prisma.proyeccionSemestre.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const proyeccionSemestreWithIdOnly = await prisma.proyeccionSemestre.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProyeccionSemestreFindManyArgs>(args?: Prisma.SelectSubset<T, ProyeccionSemestreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProyeccionSemestrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProyeccionSemestre.
   * @param {ProyeccionSemestreCreateArgs} args - Arguments to create a ProyeccionSemestre.
   * @example
   * // Create one ProyeccionSemestre
   * const ProyeccionSemestre = await prisma.proyeccionSemestre.create({
   *   data: {
   *     // ... data to create a ProyeccionSemestre
   *   }
   * })
   * 
   */
  create<T extends ProyeccionSemestreCreateArgs>(args: Prisma.SelectSubset<T, ProyeccionSemestreCreateArgs<ExtArgs>>): Prisma.Prisma__ProyeccionSemestreClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionSemestrePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProyeccionSemestres.
   * @param {ProyeccionSemestreCreateManyArgs} args - Arguments to create many ProyeccionSemestres.
   * @example
   * // Create many ProyeccionSemestres
   * const proyeccionSemestre = await prisma.proyeccionSemestre.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProyeccionSemestreCreateManyArgs>(args?: Prisma.SelectSubset<T, ProyeccionSemestreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProyeccionSemestres and returns the data saved in the database.
   * @param {ProyeccionSemestreCreateManyAndReturnArgs} args - Arguments to create many ProyeccionSemestres.
   * @example
   * // Create many ProyeccionSemestres
   * const proyeccionSemestre = await prisma.proyeccionSemestre.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProyeccionSemestres and only return the `id`
   * const proyeccionSemestreWithIdOnly = await prisma.proyeccionSemestre.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProyeccionSemestreCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProyeccionSemestreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProyeccionSemestrePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProyeccionSemestre.
   * @param {ProyeccionSemestreDeleteArgs} args - Arguments to delete one ProyeccionSemestre.
   * @example
   * // Delete one ProyeccionSemestre
   * const ProyeccionSemestre = await prisma.proyeccionSemestre.delete({
   *   where: {
   *     // ... filter to delete one ProyeccionSemestre
   *   }
   * })
   * 
   */
  delete<T extends ProyeccionSemestreDeleteArgs>(args: Prisma.SelectSubset<T, ProyeccionSemestreDeleteArgs<ExtArgs>>): Prisma.Prisma__ProyeccionSemestreClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionSemestrePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProyeccionSemestre.
   * @param {ProyeccionSemestreUpdateArgs} args - Arguments to update one ProyeccionSemestre.
   * @example
   * // Update one ProyeccionSemestre
   * const proyeccionSemestre = await prisma.proyeccionSemestre.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProyeccionSemestreUpdateArgs>(args: Prisma.SelectSubset<T, ProyeccionSemestreUpdateArgs<ExtArgs>>): Prisma.Prisma__ProyeccionSemestreClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionSemestrePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProyeccionSemestres.
   * @param {ProyeccionSemestreDeleteManyArgs} args - Arguments to filter ProyeccionSemestres to delete.
   * @example
   * // Delete a few ProyeccionSemestres
   * const { count } = await prisma.proyeccionSemestre.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProyeccionSemestreDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProyeccionSemestreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProyeccionSemestres.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProyeccionSemestreUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProyeccionSemestres
   * const proyeccionSemestre = await prisma.proyeccionSemestre.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProyeccionSemestreUpdateManyArgs>(args: Prisma.SelectSubset<T, ProyeccionSemestreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProyeccionSemestres and returns the data updated in the database.
   * @param {ProyeccionSemestreUpdateManyAndReturnArgs} args - Arguments to update many ProyeccionSemestres.
   * @example
   * // Update many ProyeccionSemestres
   * const proyeccionSemestre = await prisma.proyeccionSemestre.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProyeccionSemestres and only return the `id`
   * const proyeccionSemestreWithIdOnly = await prisma.proyeccionSemestre.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProyeccionSemestreUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProyeccionSemestreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProyeccionSemestrePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProyeccionSemestre.
   * @param {ProyeccionSemestreUpsertArgs} args - Arguments to update or create a ProyeccionSemestre.
   * @example
   * // Update or create a ProyeccionSemestre
   * const proyeccionSemestre = await prisma.proyeccionSemestre.upsert({
   *   create: {
   *     // ... data to create a ProyeccionSemestre
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProyeccionSemestre we want to update
   *   }
   * })
   */
  upsert<T extends ProyeccionSemestreUpsertArgs>(args: Prisma.SelectSubset<T, ProyeccionSemestreUpsertArgs<ExtArgs>>): Prisma.Prisma__ProyeccionSemestreClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionSemestrePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProyeccionSemestres.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProyeccionSemestreCountArgs} args - Arguments to filter ProyeccionSemestres to count.
   * @example
   * // Count the number of ProyeccionSemestres
   * const count = await prisma.proyeccionSemestre.count({
   *   where: {
   *     // ... the filter for the ProyeccionSemestres we want to count
   *   }
   * })
  **/
  count<T extends ProyeccionSemestreCountArgs>(
    args?: Prisma.Subset<T, ProyeccionSemestreCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProyeccionSemestreCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProyeccionSemestre.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProyeccionSemestreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProyeccionSemestreAggregateArgs>(args: Prisma.Subset<T, ProyeccionSemestreAggregateArgs>): Prisma.PrismaPromise<GetProyeccionSemestreAggregateType<T>>

  /**
   * Group by ProyeccionSemestre.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProyeccionSemestreGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProyeccionSemestreGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProyeccionSemestreGroupByArgs['orderBy'] }
      : { orderBy?: ProyeccionSemestreGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProyeccionSemestreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProyeccionSemestreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProyeccionSemestre model
 */
readonly fields: ProyeccionSemestreFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProyeccionSemestre.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProyeccionSemestreClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  cursos<T extends Prisma.ProyeccionSemestre$cursosArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProyeccionSemestre$cursosArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Proyeccion<T extends Prisma.ProyeccionSemestre$ProyeccionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProyeccionSemestre$ProyeccionArgs<ExtArgs>>): Prisma.Prisma__ProyeccionClient<runtime.Types.Result.GetResult<Prisma.$ProyeccionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProyeccionSemestre model
 */
export interface ProyeccionSemestreFieldRefs {
  readonly id: Prisma.FieldRef<"ProyeccionSemestre", 'Int'>
  readonly semestre: Prisma.FieldRef<"ProyeccionSemestre", 'String'>
  readonly proyeccionId: Prisma.FieldRef<"ProyeccionSemestre", 'Int'>
}
    

// Custom InputTypes
/**
 * ProyeccionSemestre findUnique
 */
export type ProyeccionSemestreFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProyeccionSemestre
   */
  select?: Prisma.ProyeccionSemestreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProyeccionSemestre
   */
  omit?: Prisma.ProyeccionSemestreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionSemestreInclude<ExtArgs> | null
  /**
   * Filter, which ProyeccionSemestre to fetch.
   */
  where: Prisma.ProyeccionSemestreWhereUniqueInput
}

/**
 * ProyeccionSemestre findUniqueOrThrow
 */
export type ProyeccionSemestreFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProyeccionSemestre
   */
  select?: Prisma.ProyeccionSemestreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProyeccionSemestre
   */
  omit?: Prisma.ProyeccionSemestreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionSemestreInclude<ExtArgs> | null
  /**
   * Filter, which ProyeccionSemestre to fetch.
   */
  where: Prisma.ProyeccionSemestreWhereUniqueInput
}

/**
 * ProyeccionSemestre findFirst
 */
export type ProyeccionSemestreFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProyeccionSemestre
   */
  select?: Prisma.ProyeccionSemestreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProyeccionSemestre
   */
  omit?: Prisma.ProyeccionSemestreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionSemestreInclude<ExtArgs> | null
  /**
   * Filter, which ProyeccionSemestre to fetch.
   */
  where?: Prisma.ProyeccionSemestreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProyeccionSemestres to fetch.
   */
  orderBy?: Prisma.ProyeccionSemestreOrderByWithRelationInput | Prisma.ProyeccionSemestreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProyeccionSemestres.
   */
  cursor?: Prisma.ProyeccionSemestreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProyeccionSemestres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProyeccionSemestres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProyeccionSemestres.
   */
  distinct?: Prisma.ProyeccionSemestreScalarFieldEnum | Prisma.ProyeccionSemestreScalarFieldEnum[]
}

/**
 * ProyeccionSemestre findFirstOrThrow
 */
export type ProyeccionSemestreFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProyeccionSemestre
   */
  select?: Prisma.ProyeccionSemestreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProyeccionSemestre
   */
  omit?: Prisma.ProyeccionSemestreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionSemestreInclude<ExtArgs> | null
  /**
   * Filter, which ProyeccionSemestre to fetch.
   */
  where?: Prisma.ProyeccionSemestreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProyeccionSemestres to fetch.
   */
  orderBy?: Prisma.ProyeccionSemestreOrderByWithRelationInput | Prisma.ProyeccionSemestreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProyeccionSemestres.
   */
  cursor?: Prisma.ProyeccionSemestreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProyeccionSemestres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProyeccionSemestres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProyeccionSemestres.
   */
  distinct?: Prisma.ProyeccionSemestreScalarFieldEnum | Prisma.ProyeccionSemestreScalarFieldEnum[]
}

/**
 * ProyeccionSemestre findMany
 */
export type ProyeccionSemestreFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProyeccionSemestre
   */
  select?: Prisma.ProyeccionSemestreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProyeccionSemestre
   */
  omit?: Prisma.ProyeccionSemestreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionSemestreInclude<ExtArgs> | null
  /**
   * Filter, which ProyeccionSemestres to fetch.
   */
  where?: Prisma.ProyeccionSemestreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProyeccionSemestres to fetch.
   */
  orderBy?: Prisma.ProyeccionSemestreOrderByWithRelationInput | Prisma.ProyeccionSemestreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProyeccionSemestres.
   */
  cursor?: Prisma.ProyeccionSemestreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProyeccionSemestres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProyeccionSemestres.
   */
  skip?: number
  distinct?: Prisma.ProyeccionSemestreScalarFieldEnum | Prisma.ProyeccionSemestreScalarFieldEnum[]
}

/**
 * ProyeccionSemestre create
 */
export type ProyeccionSemestreCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProyeccionSemestre
   */
  select?: Prisma.ProyeccionSemestreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProyeccionSemestre
   */
  omit?: Prisma.ProyeccionSemestreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionSemestreInclude<ExtArgs> | null
  /**
   * The data needed to create a ProyeccionSemestre.
   */
  data: Prisma.XOR<Prisma.ProyeccionSemestreCreateInput, Prisma.ProyeccionSemestreUncheckedCreateInput>
}

/**
 * ProyeccionSemestre createMany
 */
export type ProyeccionSemestreCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProyeccionSemestres.
   */
  data: Prisma.ProyeccionSemestreCreateManyInput | Prisma.ProyeccionSemestreCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProyeccionSemestre createManyAndReturn
 */
export type ProyeccionSemestreCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProyeccionSemestre
   */
  select?: Prisma.ProyeccionSemestreSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProyeccionSemestre
   */
  omit?: Prisma.ProyeccionSemestreOmit<ExtArgs> | null
  /**
   * The data used to create many ProyeccionSemestres.
   */
  data: Prisma.ProyeccionSemestreCreateManyInput | Prisma.ProyeccionSemestreCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionSemestreIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProyeccionSemestre update
 */
export type ProyeccionSemestreUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProyeccionSemestre
   */
  select?: Prisma.ProyeccionSemestreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProyeccionSemestre
   */
  omit?: Prisma.ProyeccionSemestreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionSemestreInclude<ExtArgs> | null
  /**
   * The data needed to update a ProyeccionSemestre.
   */
  data: Prisma.XOR<Prisma.ProyeccionSemestreUpdateInput, Prisma.ProyeccionSemestreUncheckedUpdateInput>
  /**
   * Choose, which ProyeccionSemestre to update.
   */
  where: Prisma.ProyeccionSemestreWhereUniqueInput
}

/**
 * ProyeccionSemestre updateMany
 */
export type ProyeccionSemestreUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProyeccionSemestres.
   */
  data: Prisma.XOR<Prisma.ProyeccionSemestreUpdateManyMutationInput, Prisma.ProyeccionSemestreUncheckedUpdateManyInput>
  /**
   * Filter which ProyeccionSemestres to update
   */
  where?: Prisma.ProyeccionSemestreWhereInput
  /**
   * Limit how many ProyeccionSemestres to update.
   */
  limit?: number
}

/**
 * ProyeccionSemestre updateManyAndReturn
 */
export type ProyeccionSemestreUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProyeccionSemestre
   */
  select?: Prisma.ProyeccionSemestreSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProyeccionSemestre
   */
  omit?: Prisma.ProyeccionSemestreOmit<ExtArgs> | null
  /**
   * The data used to update ProyeccionSemestres.
   */
  data: Prisma.XOR<Prisma.ProyeccionSemestreUpdateManyMutationInput, Prisma.ProyeccionSemestreUncheckedUpdateManyInput>
  /**
   * Filter which ProyeccionSemestres to update
   */
  where?: Prisma.ProyeccionSemestreWhereInput
  /**
   * Limit how many ProyeccionSemestres to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionSemestreIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProyeccionSemestre upsert
 */
export type ProyeccionSemestreUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProyeccionSemestre
   */
  select?: Prisma.ProyeccionSemestreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProyeccionSemestre
   */
  omit?: Prisma.ProyeccionSemestreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionSemestreInclude<ExtArgs> | null
  /**
   * The filter to search for the ProyeccionSemestre to update in case it exists.
   */
  where: Prisma.ProyeccionSemestreWhereUniqueInput
  /**
   * In case the ProyeccionSemestre found by the `where` argument doesn't exist, create a new ProyeccionSemestre with this data.
   */
  create: Prisma.XOR<Prisma.ProyeccionSemestreCreateInput, Prisma.ProyeccionSemestreUncheckedCreateInput>
  /**
   * In case the ProyeccionSemestre was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProyeccionSemestreUpdateInput, Prisma.ProyeccionSemestreUncheckedUpdateInput>
}

/**
 * ProyeccionSemestre delete
 */
export type ProyeccionSemestreDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProyeccionSemestre
   */
  select?: Prisma.ProyeccionSemestreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProyeccionSemestre
   */
  omit?: Prisma.ProyeccionSemestreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionSemestreInclude<ExtArgs> | null
  /**
   * Filter which ProyeccionSemestre to delete.
   */
  where: Prisma.ProyeccionSemestreWhereUniqueInput
}

/**
 * ProyeccionSemestre deleteMany
 */
export type ProyeccionSemestreDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProyeccionSemestres to delete
   */
  where?: Prisma.ProyeccionSemestreWhereInput
  /**
   * Limit how many ProyeccionSemestres to delete.
   */
  limit?: number
}

/**
 * ProyeccionSemestre.cursos
 */
export type ProyeccionSemestre$cursosArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Curso
   */
  select?: Prisma.CursoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Curso
   */
  omit?: Prisma.CursoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CursoInclude<ExtArgs> | null
  where?: Prisma.CursoWhereInput
  orderBy?: Prisma.CursoOrderByWithRelationInput | Prisma.CursoOrderByWithRelationInput[]
  cursor?: Prisma.CursoWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CursoScalarFieldEnum | Prisma.CursoScalarFieldEnum[]
}

/**
 * ProyeccionSemestre.Proyeccion
 */
export type ProyeccionSemestre$ProyeccionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proyeccion
   */
  select?: Prisma.ProyeccionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proyeccion
   */
  omit?: Prisma.ProyeccionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionInclude<ExtArgs> | null
  where?: Prisma.ProyeccionWhereInput
}

/**
 * ProyeccionSemestre without action
 */
export type ProyeccionSemestreDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProyeccionSemestre
   */
  select?: Prisma.ProyeccionSemestreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProyeccionSemestre
   */
  omit?: Prisma.ProyeccionSemestreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProyeccionSemestreInclude<ExtArgs> | null
}
